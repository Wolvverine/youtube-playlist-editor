{"version":3,"sources":["utils/gapi.js","utils/sorting.js","components/Playlists.js","components/Videos.js","components/Channels.js","components/Subscriptions.js","components/PlaylistsVideos.js","components/VideosVideos.js","App.js","registerServiceWorker.js","index.js"],"names":["buildApiRequest","requestMethod","path","params","properties","undefined","window","gapi","client","console","log","request","p","hasOwnProperty","removeEmptyParams","resource","normalizedProps","value","substr","adjustedName","replace","split","propArray","ref","pa","length","key","createResource","body","method","buildPlaylistsRequest","pageToken","mine","part","maxResults","buildPlaylistItemsRequest","playlistId","executeRequest","callback","callbackError","then","response","result","catch","reason","copyMultipleIntoPlaylist","playlistItemIds","videoIds","moveToPlaylistId","progressCallback","successCallback","failureCallback","insertRequests","i","push","snippet.playlistId","snippet.resourceId.kind","snippet.resourceId.videoId","sequence","Promise","resolve","total","_loop","index","operation","videoId","concat","playlistItemId","error","moveMultipleIntoPlaylist","deleteRequests","id","_loop2","t","removeMultipleFromPlaylist","_loop3","r","SORT_BY_SNIPPET_TITLE","SORT_BY_SNIPPET_PUBLISHED_AT","SORT_BY_SNIPPET_POSITION","SORT_BY_VIDEO_PUBLISHED_AT","SORT_ASCENDING","snippetTitleSort","a","b","snippet","title","toLowerCase","snippetPublishedAtSort","d1","Date","parse","publishedAt","d2","snippetPositionSort","position","contentDetailsPublishedAtSort","contentDetails","snippetTitleSortReverse","snippetPublishedAtSortReverse","snippetPositionSortReverse","contentDetailsPublishedAtSortReverse","Playlists","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","newPlaylistName","event","setState","newPlaylist","target","createPlaylist","state","onBehalfOfContentOwner","snippet.title","snippet.description","snippet.tags[]","snippet.defaultLanguage","status.privacyStatus","resp","retrieve","createError","store","data","currentToken","list","items","sort","prevState","playlists","toConsumableArray","nextPageToken","updateFilter","keyCode","filter","refresh","isAuthorized","prevProps","_this$state","react_default","createElement","onClick","type","onChange","className","onKeyUp","indexOf","map","playlist","Link","to","itemCount","Component","Videos","storePlaylists","storeVideos","videos","retrieveVideos","updatePlaylistName","playlistName","retrievePlaylistName","req","e","TypeError","warn","assertThisInitialized","videosLoading","retrievePlaylists","removeFromPlaylistState","videoItemId","findIndex","splice","removeError","code","message","remove","insertError","move","moveSuccess","_ref","moveFailure","moveVisible","videoItemIds","video","forEach","includes","setMoveToList","f","clearFilter","arguments","match","playlistid","_this2","visibleVideos","href","rel","Channels","channels","relatedPlaylists","keys","name","Subscriptions","produce","draft","subscriptions","storeChannelPlaylist","channelId","subscriptionsPlaylists","retrieveChannelPlaylists","buildChannelPlaylistsRequest","filt","description","subscription","chanId","resourceId","react","item","PlaylistsVideos","setPlaylistsSortMethod","playlistsSortMethod","playlistsSortDirection","getPlaylistsSortFunction","asc","setVideosSortMethod","videosSortMethod","videosSortDirection","getVideosSortFunction","refreshVideos","updatePlaylistsFilter","playlistsFilter","clearPlaylistsFilter","updateVideosFilter","videosFilter","clearVideosFilter","selectPlaylist","pfilter","visiblePlaylists","vfilter","LEFT","RIGHT","VideosVideos","setSortMethod","listIndex","lists","sync","sortMethod","sortDirection","getSortFunction","errorMessage","refreshPlaylists","refreshPlaylist","setPlaylist","k","inPlaylist","getVisibleIds","playlistItem","getVisibleAndUniqueIds","targetIndex","mark","marked","Array","isArray","clearMarked","progressMessage","progress","failure","copy","sourceListIndex","targetListIndex","copyAll","_this$getVisibleAndUn","moveAll","_this$getVisibleAndUn2","removeAll","_this$getVisibleIds","dismissErrorMessage","toggleSync","filters","bigHeader","defaultValue","m","App","google_api","user","setSigninStatus","currentUser","get","hasGrantedScopes","updateSigninStatus","initClient","init","clientId","discoveryDocs","scope","inst","auth2","getAuthInstance","isSignedIn","listen","authorize","grantOfflineAccess","signIn","getBasicProfile","userProfile","grantAccess","load","BrowserRouter","getName","Switch","Route","render","components_PlaylistsVideos","assign","components_VideosVideos","src_components_Playlists","src_components_Subscriptions","src_components_Videos","src_components_Channels","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","noop","ReactDOM","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.43be2639.chunk.js","sourcesContent":["\nexport function createResource(properties) {\n    // console.log(\"createResource\");\n    let resource = {};\n    let normalizedProps = properties;\n    for (let p in properties) {\n        let value = properties[p];\n        if (p && p.substr(-2, 2) === '[]') {\n            let adjustedName = p.replace('[]', '');\n            if (value) {\n                normalizedProps[adjustedName] = value.split(',');\n            }\n            delete normalizedProps[p];\n        }\n    }\n    for (let p in normalizedProps) {\n        // Leave properties that don't have values out of inserted resource.\n        if (normalizedProps.hasOwnProperty(p) && normalizedProps[p]) {\n            let propArray = p.split('.');\n            let ref = resource;\n            for (let pa = 0; pa < propArray.length; pa++) {\n                let key = propArray[pa];\n                if (pa === propArray.length - 1) {\n                    ref[key] = normalizedProps[p];\n                } else {\n                    ref = ref[key] = ref[key] || {};\n                }\n            }\n        }\n    }\n    return resource;\n}\n\nexport function removeEmptyParams(params) {\n    // console.log(\"removeEmptyParams\");\n    for (let p in params) {\n        if (\n            params.hasOwnProperty(p) &&\n            (!params[p] || params[p] === 'undefined')\n        ) {\n            delete params[p];\n        }\n    }\n    return params;\n}\n\nexport function buildApiRequest(requestMethod, path, params, properties) {\n    // console.log(\"buildApiRequest\", requestMethod, path, params, properties);\n\n    if (window.gapi.client === undefined || window.gapi.client === null) {\n        console.log('buildApiRequest window.gapi.client is undefined or null');\n        return null;\n    }\n\n    params = removeEmptyParams(params);\n\n    // console.log(\"buildApiRequest params\", params);\n\n    let request;\n    if (properties) {\n        let resource = createResource(properties);\n        request = window.gapi.client.request({\n            body: resource,\n            method: requestMethod,\n            path: path,\n            params: params,\n        });\n    } else {\n        request = window.gapi.client.request({\n            method: requestMethod,\n            path: path,\n            params: params,\n        });\n    }\n    return request;\n}\n\nexport function buildVideosRequest(id) {\n    return buildApiRequest('GET', '/youtube/v3/videos', {\n        id: id,\n        part: 'snippet,contentDetails'\n    });\n}\n\nexport function buildPlaylistNameRequest(id) {\n    return buildApiRequest('GET', '/youtube/v3/playlists', {\n        id: id,\n        part: 'snippet,contentDetails'\n    });\n}\n\nexport function buildPlaylistsRequest(pageToken) {\n    return buildApiRequest('GET', '/youtube/v3/playlists', {\n        mine: 'true',\n        part: 'snippet,contentDetails',\n        maxResults: '50',\n        pageToken: pageToken\n    });\n}\n\nexport function buildChannelPlaylistsRequest(channelId, pageToken) {\n    return buildApiRequest('GET', '/youtube/v3/playlists', {\n        channelId: channelId,\n        part: 'snippet,contentDetails',\n        maxResults: '50',\n        pageToken: pageToken\n    });\n}\n\nexport function buildPlaylistItemsRequest(playlistId, pageToken) {\n    return buildApiRequest('GET', '/youtube/v3/playlistItems', {\n        maxResults: '50',\n        part: 'snippet,contentDetails',\n        playlistId: playlistId,\n        pageToken: pageToken\n    });\n}\n\nexport function buildChannelsRequest() {\n    return buildApiRequest('GET', '/youtube/v3/channels', {\n        mine: 'true',\n        part: 'contentDetails'\n    });\n}\n\nexport function buildSubscriptionsRequest(pageToken) {\n    return buildApiRequest('GET', '/youtube/v3/subscriptions', {\n        mine: 'true',\n        part: 'snippet,contentDetails',\n        maxResults: 50,\n        pageToken: pageToken\n    });\n}\n\nexport function executeRequest(request, callback, callbackError) {\n\n    if (request === undefined || request === null) {\n        console.log('executeRequest request is undefined or null');\n        return;\n    }\n\n    // https://developers.google.com/api-client-library/javascript/reference/referencedocs#gapiclientbatch\n    // https://developers.google.com/api-client-library/javascript/features/promises\n    // gapi.client.Request.then(onFulfilled, onRejected, context)\n\n    request.then(\n        // onFulfilled handler:\n        function(response) {\n            // response:\n            //     An object containing information about the HTTP response.\n            //     Name\t        Type\t            Description\n            //     result\t    *\t                The JSON-parsed result. false if not JSON-parseable.\n            //     body\t        string\t            The raw response string.\n            //     headers\t    object | undefined\tThe map of HTTP response headers.\n            //     status\t    number | undefined\tHTTP status.\n            //     statusText\tstring | undefined\tHTTP status text.\n            if (callback) callback(response.result);\n        }\n    ).catch(\n        (reason) => {\n            if (callbackError) callbackError(reason);\n        }\n    );\n}\n\nexport function copyMultipleIntoPlaylist(\n    playlistItemIds,\n    videoIds,\n    moveToPlaylistId,\n    progressCallback,\n    successCallback,\n    failureCallback) {\n\n    // console.log('copyMultipleIntoPlaylist', playlistItemIds, videoIds, moveToPlaylistId);\n\n    if (!moveToPlaylistId) return;\n\n    let insertRequests = [];\n    for (let i = 0; i < videoIds.length; i++) {\n        insertRequests.push(\n            buildApiRequest(\n                'POST',\n                '/youtube/v3/playlistItems',\n                {\n                    part: 'snippet',\n                },\n                {\n                    'snippet.playlistId': moveToPlaylistId,\n                    'snippet.resourceId.kind': 'youtube#video',\n                    'snippet.resourceId.videoId': videoIds[i],\n                }\n            )\n        );\n    }\n\n    // Start off with a promise that always resolves\n    let sequence = Promise.resolve();\n\n    let total = insertRequests.length;\n\n    for (let i = 0; i < total; i++) {\n        sequence = sequence\n            .then(() => {\n                if (progressCallback) {\n                    progressCallback({index: i+1, total: total, operation: \"copying\", videoId: `${videoIds[i]}`, playlistItemId: `${playlistItemIds[i]}`});\n                }\n            })\n            .then(() => insertRequests[i])\n            .then(() => {\n                if (progressCallback) {\n                    progressCallback({index: i+1, total: total, operation: \"copied\", videoId: `${videoIds[i]}`, playlistItemId: `${playlistItemIds[i]}`});\n                }\n            });\n    }\n\n    sequence\n        .then(() => {\n            // console.log(\"copyMultipleIntoPlaylist: success\");\n            if (successCallback) {\n                successCallback();\n            }\n        })\n        .catch(function(reason) {\n            // console.log(\"copyMultipleIntoPlaylist: failure\", reason);\n            if (failureCallback) {\n                failureCallback({\n                    error: reason.result.error\n                })\n            }\n        });\n\n}\n\nexport function moveMultipleIntoPlaylist(\n    playlistItemIds,\n    videoIds,\n    moveToPlaylistId,\n    progressCallback,\n    successCallback,\n    failureCallback) {\n\n    // console.log('moveMultipleIntoPlaylist', playlistItemIds, videoIds, moveToPlaylistId);\n\n    if (!moveToPlaylistId) return;\n\n    let insertRequests = [];\n    for (let i = 0; i < videoIds.length; i++) {\n        insertRequests.push(\n            buildApiRequest(\n                'POST',\n                '/youtube/v3/playlistItems',\n                {\n                    part: 'snippet',\n                },\n                {\n                    'snippet.playlistId': moveToPlaylistId,\n                    'snippet.resourceId.kind': 'youtube#video',\n                    'snippet.resourceId.videoId': videoIds[i],\n                }\n            )\n        );\n    }\n\n    let deleteRequests = [];\n    for (let i = 0; i < playlistItemIds.length; i++) {\n        deleteRequests.push(\n            buildApiRequest('DELETE', '/youtube/v3/playlistItems', {\n                id: playlistItemIds[i],\n            })\n        );\n    }\n\n    // Start off with a promise that always resolves\n    let sequence = Promise.resolve();\n\n    let total = insertRequests.length;\n\n    for (let i = 0; i < total; i++) {\n        sequence = sequence\n            .then(() => {\n                if (progressCallback) {\n                    progressCallback({index: i+1, total: total, operation: \"inserting\", videoId: `${videoIds[i]}`, playlistItemId: `${playlistItemIds[i]}`});\n                }\n            })\n            .then(() => insertRequests[i])\n            .then(() => {\n                if (progressCallback) {\n                    progressCallback({index: i+1, total: total, operation: \"removing\", videoId: `${videoIds[i]}`, playlistItemId: `${playlistItemIds[i]}`});\n                }\n            })\n            .then(() => deleteRequests[i])\n            .then(() => {\n                if (progressCallback) {\n                    progressCallback({index: i+1, total: total, operation: \"removed\", videoId: `${videoIds[i]}`, playlistItemId: `${playlistItemIds[i]}`});\n                }\n            });\n    }\n\n    sequence\n        .then(t => {\n            // console.log(\"moveMultipleIntoPlaylist: call insertSuccessCallback\");\n            successCallback();\n        })\n        .catch(function(reason) {\n            // console.log(\"move failure\", reason);\n            if (failureCallback) {\n                failureCallback({\n                    error: reason.result.error //,\n                    // videoId: `${videoIds[i]}`,\n                    // playlistItemId: `${playlistItemIds[i]}`,\n                })\n            }\n        });\n\n}\n\nexport function removeMultipleFromPlaylist(\n    playlistItemIds,\n    videoIds,\n    playlistId,\n    progressCallback,\n    successCallback,\n    failureCallback) {\n\n    // console.log('removeMultipleFromPlaylist', playlistItemIds, videoIds, playlistId);\n\n    if (!playlistId) return;\n\n    let deleteRequests = [];\n    for (let i = 0; i < playlistItemIds.length; i++) {\n        deleteRequests.push(\n            buildApiRequest(\n                'DELETE',\n                '/youtube/v3/playlistItems',\n                {\n                    id: playlistItemIds[i],\n                }\n            )\n        );\n    }\n\n    let total = deleteRequests.length;\n\n    let sequence = Promise.resolve();\n\n    for (let i = 0; i < total; i++) {\n        sequence = sequence\n            .then(() => {\n                if (progressCallback) {\n                    progressCallback({index: i+1, total: total, operation: \"removing\", videoId: `${videoIds[i]}`, playlistItemId: `${playlistItemIds[i]}`});\n                }\n            })\n            .then(() => deleteRequests[i])\n            .then(() => {\n                if (progressCallback) {\n                    progressCallback({index: i+1, total: total, operation: \"removed\", videoId: `${videoIds[i]}`, playlistItemId: `${playlistItemIds[i]}`});\n                }\n            });\n    }\n\n    sequence\n        .then(r => {\n            successCallback();\n        })\n        .catch(function(reason) {\n            // console.log(\"remove failure\", reason);\n            if (failureCallback) {\n                failureCallback({\n                    error: reason.result.error\n                })\n            }\n        });\n\n}\n","\nexport const SORT_BY_SNIPPET_TITLE = \"snippetTitle\";\nexport const SORT_BY_SNIPPET_PUBLISHED_AT = \"snippetPublishedAt\";\nexport const SORT_BY_SNIPPET_POSITION = \"snippetPosition\";\nexport const SORT_BY_VIDEO_PUBLISHED_AT = \"videoPublishedAt\";\nexport const SORT_ASCENDING = true;    // false means sort descending\n\nexport function snippetTitleSort(a, b) {\n    return a.snippet.title.toLowerCase() > b.snippet.title.toLowerCase() ? 1 :\n        b.snippet.title.toLowerCase() > a.snippet.title.toLowerCase() ? -1 :\n            0;\n}\n\nexport function snippetPublishedAtSort(a, b) {\n    let d1 = Date.parse(a.snippet.publishedAt);\n    let d2 = Date.parse(b.snippet.publishedAt);\n    return d1 > d2 ? 1 :\n        d2 > d1 ? -1 :\n            0;\n}\n\nexport function snippetPositionSort(a, b) {\n    return a.snippet.position > b.snippet.position ? 1 :\n        b.snippet.position > a.snippet.position ? -1 :\n            0;\n}\n\nexport function contentDetailsPublishedAtSort(a, b) {\n    let d1 = Date.parse(a.contentDetails.publishedAt);\n    let d2 = Date.parse(b.contentDetails.publishedAt);\n    return d1 > d2 ? 1 :\n        d2 > d1 ? -1 :\n            0;\n}\n\nexport function snippetTitleSortReverse(b, a) {\n    return a.snippet.title.toLowerCase() > b.snippet.title.toLowerCase() ? 1 :\n        b.snippet.title.toLowerCase() > a.snippet.title.toLowerCase() ? -1 :\n            0;\n}\n\nexport function snippetPublishedAtSortReverse(b, a) {\n    let d1 = Date.parse(a.snippet.publishedAt);\n    let d2 = Date.parse(b.snippet.publishedAt);\n    return d1 > d2 ? 1 :\n        d2 > d1 ? -1 :\n            0;\n}\n\nexport function snippetPositionSortReverse(b, a) {\n    return a.snippet.position > b.snippet.position ? 1 :\n        b.snippet.position > a.snippet.position ? -1 :\n            0;\n}\n\nexport function contentDetailsPublishedAtSortReverse(b, a) {\n    let d1 = Date.parse(a.contentDetails.publishedAt);\n    let d2 = Date.parse(b.contentDetails.publishedAt);\n    return d1 > d2 ? 1 :\n        d2 > d1 ? -1 :\n            0;\n}\n","import React, { Component } from 'react';\nimport {\n    buildApiRequest,\n    buildPlaylistsRequest,\n    executeRequest,\n} from '../utils/gapi';\nimport { Link } from 'react-router-dom';\nimport './Playlists.css';\nimport {snippetTitleSort} from \"../utils/sorting\";\n\n/**\n * Display the list of playlists of the authorized user.\n */\nclass Playlists extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isAuthorized: false,\n            playlists: null,\n            newPlaylist: '',\n            filter: '',\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.isAuthorized !== state.isAuthorized) {\n            return {\n                isAuthorized: props.isAuthorized,\n            };\n        }\n        // No state update necessary\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.isAuthorized && this.state.playlists === null) {\n            // Only retrieve data if state.playlists is empty; otherwise this will generate an endless loop.\n            this.retrieve();\n        }\n    }\n\n    newPlaylistName = event => {\n        this.setState({ newPlaylist: event.target.value });\n    };\n\n    createPlaylist = () => {\n        if (!this.state.newPlaylist) return;\n        let request = buildApiRequest(\n            'POST',\n            '/youtube/v3/playlists',\n            {\n                part: 'snippet,status',\n                onBehalfOfContentOwner: '',\n            },\n            {\n                'snippet.title': this.state.newPlaylist,\n                'snippet.description': '',\n                'snippet.tags[]': '',\n                'snippet.defaultLanguage': '',\n                'status.privacyStatus': 'private', // unlisted, private, public    https://developers.google.com/youtube/v3/docs/playlists#resource\n            }\n        );\n        executeRequest(\n            request,\n            resp => {\n                this.retrieve();\n            },\n            this.createError\n        );\n    };\n\n\n    store = (data, currentToken) => {\n        if (!data) return;\n\n        let list = data.items;\n        list.sort(snippetTitleSort);\n\n        if (currentToken === undefined || !currentToken) {\n            this.setState({ playlists: list });\n        } else {\n            this.setState(prevState => ({ playlists: [...prevState.playlists, ...list] }));\n        }\n\n        if (data.nextPageToken) {\n            this.retrieve(data.nextPageToken);\n        }\n\n    };\n\n    retrieve = nextPageToken => {\n        executeRequest(buildPlaylistsRequest(nextPageToken),\n            data => this.store(data, nextPageToken));\n    };\n\n    updateFilter = event => {\n        if (event.keyCode === 27) {\n            this.setState({ filter: '' });\n        } else {\n            this.setState({ filter: event.target.value });\n        }\n    };\n\n    refresh = () => {\n        this.retrieve();\n    };\n\n    componentDidMount() {\n        if (this.state.isAuthorized) this.retrieve();\n    }\n\n    render() {\n        const { isAuthorized, playlists, newPlaylist, filter } = this.state;\n\n        if (!isAuthorized) {\n            return null;\n        } else {\n            if (playlists) {\n                return (\n                    <div>\n                        <h2>list of playlists</h2>\n                        <button onClick={this.refresh}>refresh</button>\n                        <h3>{playlists.length} playlists</h3>\n                        <div>\n                            new playlist:{' '}\n                            <input\n                                type=\"text\"\n                                value={newPlaylist}\n                                onChange={this.newPlaylistName}\n                            />{' '}\n                            <button onClick={this.createPlaylist}>\n                                create\n                            </button>\n                        </div>\n                        <div className=\"filter\">\n                            filter:{' '}\n                            <input type=\"text\" onKeyUp={this.updateFilter} />\n                        </div>\n                        <div>\n                            {playlists\n                                .filter(\n                                    p =>\n                                        p.snippet.title\n                                            .toLowerCase()\n                                            .indexOf(filter.toLowerCase()) > -1\n                                )\n                                .map((playlist, index) => {\n                                    // console.log(JSON.stringify(playlist));\n                                    return (\n                                        <div key={index}>\n                                            <Link to={`/videos/${playlist.id}`}>\n                                                {playlist.snippet.title} (\n                                                {\n                                                    playlist.contentDetails\n                                                        .itemCount\n                                                }{' '}\n                                                videos)\n                                            </Link>\n                                        </div>\n                                    );\n                                    // return <div key={index}><a href={`#${playlist.id}`}>{playlist.snippet.title}</a> ({playlist.contentDetails.itemCount} videos)</div>\n                                })}\n                        </div>\n                    </div>\n                );\n            } else {\n                return <div>Retrieving the playlists...</div>;\n            }\n        }\n    }\n}\n\nexport default Playlists;\n","import React, { Component } from 'react';\nimport {\n    buildApiRequest,\n    buildPlaylistsRequest,\n    buildPlaylistItemsRequest,\n    executeRequest,\n    buildPlaylistNameRequest,\n    moveMultipleIntoPlaylist,\n} from '../utils/gapi';\nimport './Videos.css';\nimport {snippetTitleSort} from \"../utils/sorting\";\n\n/**\n * Display the list of videos for a playlist.\n */\nclass Videos extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isAuthorized: false,\n            playlistName: null,\n            playlistId: props.match.params.playlistid,\n            videos: null,\n            playlists: null,\n            moveToPlaylistId: null,\n            filter: '',\n            videosLoading: false,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.isAuthorized !== state.isAuthorized) {\n            return {\n                isAuthorized: props.isAuthorized,\n            };\n        }\n        // No state update necessary\n        return null;\n    }\n\n    componentDidMount() {\n        if (this.state.isAuthorized) this.refresh();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        if (!this.state.isAuthorized) return;\n\n        if (this.state.playlistName === null) {\n            // Only retrieve data if state.playlistName is empty; otherwise this will generate an endless loop.\n            this.retrievePlaylistName();\n        }\n\n        if (\n            !this.state.videosLoading &&\n            this.state.playlistId &&\n            this.state.videos === null\n        ) {\n            this.retrieveVideos();\n        }\n\n        if (this.state.playlists === null) {\n            this.retrievePlaylists();\n        }\n    }\n\n    storePlaylists = data => {\n        if (!data) return;\n        let list = data.items;\n        list.sort(snippetTitleSort);\n        this.setState({ playlists: list });\n    };\n\n    storeVideos = (data, currentToken) => {\n\n        if (!data) return;\n\n        let list = data.items;\n        list.sort(snippetTitleSort);\n\n        if (currentToken === undefined || !currentToken) {\n            this.setState({ videos: list });\n        } else {\n            this.setState(prevState => ({ videos: [...prevState.videos, ...list] }));\n        }\n\n        if (data.nextPageToken) {\n            this.retrieveVideos(data.nextPageToken);\n        }\n    };\n\n    updatePlaylistName = playlistName => {\n        this.setState({ playlistName });\n    };\n\n    retrievePlaylistName = () => {\n        if (!this.state.playlistId) {\n            return;\n        }\n\n        let req = buildPlaylistNameRequest(this.state.playlistId);\n\n        if (!req) {\n            console.warn('req is null');\n            return;\n        }\n\n        req.then(\n            function(response) {\n                try {\n                    this.updatePlaylistName(\n                        response.result.items[0].snippet.title\n                    );\n                } catch (e) {\n                    if (e instanceof TypeError) {\n                        console.log('buildPlaylistNameRequest incomplete response', e);\n                    } else {\n                        console.error('buildPlaylistNameRequest unexpected error', e);\n                    }\n                }\n            },\n            function() {\n                // onRejected handler\n                console.warn('buildPlaylistNameRequest rejected');\n            },\n            this\n        );\n    };\n\n    retrieveVideos = nextPageToken => {\n        this.setState({ videosLoading: true });\n        executeRequest(\n            buildPlaylistItemsRequest(this.state.playlistId, nextPageToken),\n            data => this.storeVideos(data, nextPageToken)\n        );\n    };\n\n    retrievePlaylists = () => {\n        executeRequest(buildPlaylistsRequest(), this.storePlaylists);\n    };\n\n    removeFromPlaylistState = videoItemId => {\n        let videos = this.state.videos;\n        let i = videos.findIndex(function f(e) {\n            return e.id === videoItemId;\n        });\n        videos.splice(i, 1);\n        this.setState({ videos });\n    };\n\n    removeError = error => {\n        console.log('Videos.removeError', error.code, error.message);\n    };\n\n    /**\n     * Remove a video from the current playlist\n     * @param videoItemId ID of the video-item in the current playlist\n     */\n    remove = videoItemId => {\n        if (!videoItemId) return;\n        let request = buildApiRequest('DELETE', '/youtube/v3/playlistItems', {\n            id: videoItemId,\n        });\n        executeRequest(\n            request,\n            () => this.removeFromPlaylistState(videoItemId),\n            this.removeError\n        );\n    };\n\n    createError = error => {\n        console.log('Videos.insertError', error);\n    };\n\n    insertError = error => {\n        console.log('Videos.insertError', error);\n    };\n\n    move = (videoItemId, videoId, moveToPlaylistId) => {\n/*\n        moveIntoPlaylist(videoItemId, videoId, moveToPlaylistId)\n            .then(function(response) {\n                console.log('movep.moveIntoPlaylist resolved', response);\n            })\n            .catch(function(reason) {\n                console.log(\n                    'movep.moveIntoPlaylist rejected',\n                    reason,\n                    reason.result.error.message\n                );\n            });\n*/\n    };\n\n    moveSuccess = ({ operation, data, videoId, videoItemId }) => {\n        switch (operation) {\n            case 'insert':\n                break;\n            case 'delete':\n                this.removeFromPlaylistState(videoItemId);\n                break;\n            default:\n                console.error(`moveSuccess: unknown operation ${operation}`);\n        }\n    };\n\n    moveFailure = r => {\n        console.log('moveFailure', r);\n    };\n\n    moveVisible = () => {\n\n        let videoItemIds = [];\n        let videoIds = [];\n\n        this.state.videos\n            .filter(video => video.snippet.title.toLowerCase().indexOf(this.state.filter.toLowerCase()) > -1)\n            .forEach(video => {\n                videoItemIds.push(video.id);\n                if (!videoIds.includes(video.contentDetails.videoId)) {     // avoid pushing duplicates\n                    videoIds.push(video.contentDetails.videoId);\n                }\n            });\n\n        moveMultipleIntoPlaylist(\n            videoItemIds,\n            videoIds,\n            this.state.moveToPlaylistId,\n            this.moveSuccess,\n            this.moveFailure\n        );\n\n    };\n\n    setMoveToList = event => {\n        this.setState({ moveToPlaylistId: event.target.value });\n    };\n\n    updateFilter = event => {\n        let f = event.target.value;\n        this.setState({ filter: f });\n    };\n\n    refresh = (clearFilter = false) => {\n\n        if (!this.state.isAuthorized) return;\n\n        this.setState({\n            playlistName: null,\n            videos: null,\n            playlists: null,\n            videosLoading: false,\n            filter: clearFilter ? '' : this.state.filter,\n        });\n\n        this.retrievePlaylistName();\n        this.retrieveVideos();\n        this.retrievePlaylists();\n    };\n\n    render() {\n        const {\n            isAuthorized,\n            playlistId,\n            playlistName,\n            videos,\n            playlists,\n            moveToPlaylistId,\n            filter,\n        } = this.state;\n\n        if (!isAuthorized) {\n            return null;\n        } else {\n            if (videos) {\n                let visibleVideos = videos.filter(video => video.snippet.title.toLowerCase().indexOf(filter.toLowerCase()) > -1);\n                visibleVideos.sort(snippetTitleSort);\n\n                return (\n                    <div className=\"videos\">\n                        <h2>Videos in {playlistName} :</h2>\n                        <h3>{videos.length} videos</h3>\n                        <button onClick={this.refresh}>refresh</button>\n                        <div className=\"playlist-selector\">\n                            target playlist:\n                            {playlists && (\n                                <select onChange={this.setMoveToList}>\n                                    <option value=\"\">\n                                        select list to move to\n                                    </option>\n                                    {playlists.map((p, i) => {\n                                        return p.id === playlistId ? null : (\n                                            <option key={i} value={p.id}>\n                                                {p.snippet.title}\n                                            </option>\n                                        );\n                                    })}\n                                </select>\n                            )}\n                        </div>\n                        {moveToPlaylistId &&\n                        <div>\n                            <button onClick={this.moveVisible}>\n                                move visible to target playlist\n                            </button>\n                        </div>\n                        }\n                        <div className=\"filter\">\n                            filter: <input type=\"text\" value={filter} onChange={this.updateFilter} />\n                        </div>\n                        <div>\n                        {\n                            visibleVideos.map(\n                                (video, index) => {\n                                    return (\n                                        <div key={index}>\n                                            <a href={`https://www.youtube.com/watch?v=${video.contentDetails.videoId}`} target=\"_blank\" rel=\"noopener noreferrer\">{video.snippet.title}</a>\n                                            {' '}\n                                            <button onClick={() => this.remove(video.id)}>remove</button>\n                                            {moveToPlaylistId &&\n                                            <button onClick={() => this.move(video.id, video.contentDetails.videoId, moveToPlaylistId)}>move</button>\n                                            }\n                                        </div>\n                                    );\n                                }\n                            )\n                        }\n                        </div>\n                    </div>\n                );\n            } else {\n                return <div>Retrieving the list of videos...</div>;\n            }\n        }\n    }\n\n}\n\nexport default Videos;\n","import React, { Component } from 'react';\nimport { buildChannelsRequest, executeRequest } from '../utils/gapi';\nimport { Link } from 'react-router-dom';\nimport './Channels.css';\n\n/**\n * Display the list of channels of the authorized user.\n */\nclass Channels extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isAuthorized: false,\n            channels: null\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.isAuthorized !== state.isAuthorized) {\n            return {\n                isAuthorized: props.isAuthorized,\n            };\n        }\n        // No state update necessary\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // console.log('Channels.componentDidUpdate');\n        if (this.state.isAuthorized && this.state.channels === null) {\n            this.retrieve();\n        }\n    }\n\n    store = data => {\n        if (!data) return;\n        this.setState({\n            channels: data.items[0].contentDetails.relatedPlaylists,\n        });\n    };\n\n    retrieve = nextPageToken => {\n        executeRequest(buildChannelsRequest(), this.store);\n    };\n\n    componentDidMount() {\n        if (this.state.isAuthorized) this.retrieve();\n    }\n\n    render() {\n        const { isAuthorized, channels } = this.state;\n\n        if (!isAuthorized) {\n            return null;\n        } else {\n            if (channels) {\n                return (\n                    <div>\n                        <h2>list of channels</h2>\n                        <div>\n                            {Object.keys(channels).map((name, index) => {\n                                return (\n                                    <div key={index}>\n                                        <Link to={`/videos/${channels[name]}`}>\n                                            {name}\n                                        </Link>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </div>\n                );\n            } else {\n                return <div>Retrieving the channels...</div>;\n            }\n        }\n    }\n}\n\nexport default Channels;\n","import React, {Component, Fragment} from 'react';\nimport {\n    buildChannelPlaylistsRequest,\n    buildSubscriptionsRequest,\n    executeRequest,\n} from '../utils/gapi';\nimport { Link } from 'react-router-dom';\nimport './Subscriptions.css';\nimport {produce} from \"immer\";\nimport {snippetTitleSort} from \"../utils/sorting\";\n\n/**\n * Display the list of subscriptions of the authorized user.\n */\nclass Subscriptions extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isAuthorized: false,\n            subscriptions: null,\n            subscriptionsPlaylists: {},\n            filter: '',\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.isAuthorized !== state.isAuthorized) {\n            return {\n                isAuthorized: props.isAuthorized,\n            };\n        }\n        // No state update necessary\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.isAuthorized && this.state.subscriptions === null) {\n            // Only retrieve data if state.subscriptions is empty; otherwise this will generate an endless loop.\n            this.retrieve();\n        }\n    }\n\n    store = (data, currentToken) => {\n\n        if (!data) return;\n\n        let list = data.items;\n        list.sort(snippetTitleSort);\n\n        this.setState(\n            produce(draft => {\n                if (currentToken === undefined || !currentToken) {\n                    draft.subscriptions = list;\n                } else {\n                    draft.subscriptions = [...draft.subscriptions, ...list]\n                }\n            })\n        );\n\n        if (data.nextPageToken) {\n            this.retrieve(data.nextPageToken);\n        }\n    };\n\n    retrieve = nextPageToken => {\n        executeRequest(\n            buildSubscriptionsRequest(nextPageToken),\n            data => this.store(data, nextPageToken)\n        );\n    };\n\n    storeChannelPlaylist = (channelId, data) => {\n        const list = data.items;\n        list.sort(snippetTitleSort);\n        this.setState(\n            produce(draft => {\n                draft.subscriptionsPlaylists[channelId] = list;\n            })\n        );\n    };\n\n    retrieveChannelPlaylists = (channelId) => {\n        executeRequest(\n            buildChannelPlaylistsRequest(channelId),\n            data => this.storeChannelPlaylist(channelId, data)\n        );\n    };\n\n    updateFilter = event => {\n        if (event.keyCode === 27) {\n            this.setState({ filter: '' });\n        } else {\n            this.setState({ filter: event.target.value });\n        }\n    };\n\n    clearFilter = () => {\n        this.setState({filter: ''});\n    };\n\n    refresh = () => {\n        this.retrieve();\n    };\n\n    componentDidMount() {\n        if (this.state.isAuthorized) this.retrieve();\n    }\n\n    render() {\n        const { isAuthorized, subscriptions, subscriptionsPlaylists, filter } = this.state;\n\n        const filt = filter.toLowerCase();\n\n        if (!isAuthorized) {\n            return null;\n        } else {\n            if (subscriptions) {\n                return (\n                    <div>\n                        <h2>list of subscriptions</h2>\n                        <h3>{subscriptions.length} subscriptions</h3>\n                        <button onClick={this.refresh}>refresh</button>\n                        <div className=\"filter\">\n                            filter:{' '}\n                            <input type=\"text\" onKeyUp={this.updateFilter} />\n                            <button onClick={this.clearFilter}>clear filter</button>\n                        </div>\n                        <div className=\"subscriptions-list\">\n                            {subscriptions\n                                .filter(p => (p.snippet.title.toLowerCase().indexOf(filt) > -1) || (p.snippet.description.toLowerCase().indexOf(filt) > -1))\n                                .map((subscription, index) => {\n                                    const chanId = subscription.snippet.resourceId.channelId;\n                                    return (\n                                        <Fragment key={index}>\n                                            <div>\n                                                <a href={`https://www.youtube.com/channel/${chanId}`} target=\"_blank\" rel=\"noopener noreferrer\"> <i className=\"fas fa-external-link-alt\"></i></a>\n                                                <Link to={`/videos/${subscription.id}`}>\n                                                    {subscription.snippet.title}\n                                                </Link>\n                                            </div>\n                                            <div>\n                                                {subscription.snippet.description}\n                                                {' '}<button onClick={() => this.retrieveChannelPlaylists(chanId)}>show playlists</button>\n                                                {subscriptionsPlaylists[chanId] &&\n                                                <div className=\"channel-playlists\">\n                                                    {subscriptionsPlaylists[chanId].map(\n                                                        (item, index) => {\n                                                            return (\n                                                                <a key={index} href={`https://www.youtube.com/playlist?list=${item.id}`} target=\"_blank\" rel=\"noopener noreferrer\">{item.snippet.title} ({item.contentDetails.itemCount})</a>\n                                                            );\n                                                        }\n                                                    )}\n                                                </div>\n                                                }\n                                            </div>\n                                        </Fragment>\n                                    );\n                                })}\n                        </div>\n                    </div>\n                );\n            } else {\n                return <div>Retrieving the subscriptions...</div>;\n            }\n        }\n    }\n}\n\nexport default Subscriptions;\n","import React, { Component } from 'react';\nimport {\n    buildPlaylistItemsRequest,\n    buildPlaylistsRequest,\n    executeRequest,\n} from '../utils/gapi';\nimport {\n    contentDetailsPublishedAtSort, contentDetailsPublishedAtSortReverse,\n    snippetPositionSort, snippetPositionSortReverse,\n    snippetPublishedAtSort, snippetPublishedAtSortReverse,\n    snippetTitleSort, snippetTitleSortReverse,\n    SORT_ASCENDING, SORT_BY_SNIPPET_POSITION,\n    SORT_BY_SNIPPET_PUBLISHED_AT,\n    SORT_BY_SNIPPET_TITLE,\n    SORT_BY_VIDEO_PUBLISHED_AT\n} from \"../utils/sorting\";\nimport {produce} from \"immer\";\n\n\nclass PlaylistsVideos extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isAuthorized: false,\n            playlists: null,\n            playlistId: null,\n            playlistsFilter: '',\n            playlistsSortMethod: SORT_BY_SNIPPET_TITLE,\n            playlistsSortDirection: SORT_ASCENDING,\n            videos: [],\n            videosFilter: '',\n            videosSortMethod: SORT_BY_SNIPPET_TITLE,\n            videosSortDirection: SORT_ASCENDING,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.isAuthorized !== state.isAuthorized) {\n            return {\n                isAuthorized: props.isAuthorized,\n            };\n        }\n        // No state update necessary\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.isAuthorized && this.state.playlists === null) {\n            // only retrieve data if state.playlists is empty; otherwise this will generate an endless loop.\n            this.retrievePlaylists();\n        }\n    }\n\n    setPlaylistsSortMethod = method => {\n        // if same method, then flip the direction\n        this.setState(\n            produce(draft => {\n                if (draft.playlistsSortMethod === method) {\n                    draft.playlistsSortDirection = !draft.playlistsSortDirection;\n                } else {\n                    draft.playlistsSortMethod = method;\n                }\n            })\n        );\n    };\n\n    getPlaylistsSortFunction = () => {\n        let asc = this.state.playlistsSortDirection;\n        switch(this.state.playlistsSortMethod) {\n            case SORT_BY_SNIPPET_TITLE : return asc ? snippetTitleSort : snippetTitleSortReverse;\n            case SORT_BY_SNIPPET_PUBLISHED_AT : return asc ? snippetPublishedAtSort : snippetPublishedAtSortReverse;\n            case SORT_BY_SNIPPET_POSITION : return asc ? snippetPositionSort : snippetPositionSortReverse;\n            case SORT_BY_VIDEO_PUBLISHED_AT : return asc ? contentDetailsPublishedAtSort : contentDetailsPublishedAtSortReverse;\n            default : return snippetTitleSort;\n        }\n    };\n\n    setVideosSortMethod = method => {\n        // if same method, then flip the direction\n        this.setState(\n            produce(draft => {\n                if (draft.videosSortMethod === method) {\n                    draft.videosSortDirection = !draft.videosSortDirection;\n                } else {\n                    draft.videosSortMethod = method;\n                }\n            })\n        );\n    };\n\n    getVideosSortFunction = () => {\n        let asc = this.state.videosSortDirection;\n        switch(this.state.videosSortMethod) {\n            case SORT_BY_SNIPPET_TITLE : return asc ? snippetTitleSort : snippetTitleSortReverse;\n            case SORT_BY_SNIPPET_PUBLISHED_AT : return asc ? snippetPublishedAtSort : snippetPublishedAtSortReverse;\n            case SORT_BY_SNIPPET_POSITION : return asc ? snippetPositionSort : snippetPositionSortReverse;\n            case SORT_BY_VIDEO_PUBLISHED_AT : return asc ? contentDetailsPublishedAtSort : contentDetailsPublishedAtSortReverse;\n            default : return snippetTitleSort;\n        }\n    };\n\n    retrievePlaylists = nextPageToken => {\n        executeRequest(buildPlaylistsRequest(nextPageToken),\n            data => this.storePlaylists(data, nextPageToken));\n    };\n\n    storePlaylists = (data, currentToken) => {\n\n        if (!data) return;\n\n        let list = data.items;\n        list.sort(snippetTitleSort);\n\n        if (currentToken === undefined || !currentToken) {\n            this.setState({ playlists: list });\n        } else {\n            this.setState(prevState => ({ playlists: [...prevState.playlists, ...list] }));\n        }\n\n        if (data.nextPageToken) {\n            this.retrievePlaylists(data.nextPageToken);\n        }\n\n    };\n\n    retrieveVideos = nextPageToken => {\n        executeRequest(\n            buildPlaylistItemsRequest(this.state.playlistId, nextPageToken),\n            data => this.storeVideos(data, nextPageToken)\n        );\n    };\n\n    refreshVideos = () => {\n        this.setState({videos: []}, this.retrieveVideos);\n    };\n\n    storeVideos = (data, currentToken) => {\n\n        if (!data) return;\n\n        let list = data.items;\n        list.sort(snippetTitleSort);\n\n        if (currentToken === undefined || !currentToken) {\n            this.setState({ videos: list });\n        } else {\n            this.setState(prevState => ({ videos: [...prevState.videos, ...list] }));\n        }\n\n        if (data.nextPageToken) {\n            this.retrieveVideos(data.nextPageToken);\n        }\n    };\n\n    updatePlaylistsFilter = event => {\n        this.setState({ playlistsFilter: event.keyCode === 27 ? '' : event.target.value });\n    };\n\n    clearPlaylistsFilter = () => {\n        this.setState({playlistsFilter: ''});\n    };\n\n    updateVideosFilter = event => {\n        this.setState({ videosFilter: event.keyCode === 27 ? '' : event.target.value });\n    };\n\n    clearVideosFilter = () => {\n        this.setState({videosFilter: ''});\n    };\n\n    selectPlaylist = playlistId => {\n        this.setState({playlistId: playlistId}, this.retrieveVideos);\n    };\n\n    componentDidMount() {\n        if (this.state.isAuthorized) this.retrievePlaylists();\n    }\n\n    render() {\n        const { isAuthorized, playlistId, playlists, videos, playlistsFilter, videosFilter, playlistsSortMethod, videosSortMethod, playlistsSortDirection, videosSortDirection } = this.state;\n\n        let pfilter = playlistsFilter.toLowerCase();\n        let visiblePlaylists = playlists ? playlists.filter(playlist => playlist.snippet.title.toLowerCase().indexOf(pfilter) > -1).sort(this.getPlaylistsSortFunction()) : [];\n\n        let vfilter = videosFilter.toLowerCase();\n        let visibleVideos = videos ? videos.filter(video => video.snippet.title.toLowerCase().indexOf(vfilter) > -1).sort(this.getVideosSortFunction()) : [];\n\n        if (!isAuthorized) {\n            return null;\n        } else {\n            if (playlists) {\n                return (\n                    <div className=\"two-columns-headers\">\n                        <div className=\"column-header\">\n                            <div>\n                                <span className=\"strong\">Playlists</span> • {playlists.length} playlists <button onClick={() => this.retrievePlaylists()}>refresh</button>\n                            </div>\n                            <div className=\"filter\">\n                                filter: <input type=\"text\" value={playlistsFilter} onChange={this.updatePlaylistsFilter} /> <button onClick={this.clearPlaylistsFilter}>clear filter</button>\n                            </div>\n                            <div className=\"sorting\">\n                                <button onClick={() => this.setPlaylistsSortMethod(SORT_BY_SNIPPET_TITLE)} className={playlistsSortMethod === SORT_BY_SNIPPET_TITLE ? \"text-button active\" : \"text-button\"}>\n                                    title<i className={playlistsSortDirection ? \"fas fa-sort-alpha-down\" : \"fas fa-sort-alpha-up\"}></i>\n                                </button>\n{/*\n                                <button onClick={() => this.setPlaylistsSortMethod(SORT_BY_SNIPPET_PUBLISHED_AT)} className={playlistsSortMethod === SORT_BY_SNIPPET_PUBLISHED_AT ? \"text-button active\" : \"text-button\"}>\n                                    added to playlist<i className={playlistsSortDirection ? \"fas fa-sort-numeric-down\" : \"fas fa-sort-numeric-up\"}></i>\n                                </button>\n                                <button onClick={() => this.setPlaylistsSortMethod(SORT_BY_VIDEO_PUBLISHED_AT)} className={playlistsSortMethod === SORT_BY_VIDEO_PUBLISHED_AT ? \"text-button active\" : \"text-button\"}>\n                                    video created<i className={playlistsSortDirection ? \"fas fa-sort-numeric-down\" : \"fas fa-sort-numeric-up\"}></i>\n                                </button>\n                                <button onClick={() => this.setPlaylistsSortMethod(SORT_BY_SNIPPET_POSITION)} className={playlistsSortMethod === SORT_BY_SNIPPET_POSITION ? \"text-button active\" : \"text-button\"}>\n                                    position<i className={playlistsSortDirection ? \"fas fa-sort-numeric-down\" : \"fas fa-sort-numeric-up\"}></i>\n                                </button>\n*/}\n                            </div>\n                        </div>\n                        <div className=\"column-header\">\n                            <div>\n                                <span className=\"strong\">Videos</span> • {videos.length} videos <button onClick={this.refreshVideos}>refresh</button>\n                            </div>\n                            <div className=\"filter\">\n                                filter: <input type=\"text\" value={videosFilter} onChange={this.updateVideosFilter} /> <button onClick={this.clearVideosFilter}>clear filter</button>\n                            </div>\n                            <div className=\"sorting\">\n                                <button onClick={() => this.setVideosSortMethod(SORT_BY_SNIPPET_TITLE)} className={videosSortMethod === SORT_BY_SNIPPET_TITLE ? \"text-button active\" : \"text-button\"}>\n                                    title<i className={videosSortDirection ? \"fas fa-sort-alpha-down\" : \"fas fa-sort-alpha-up\"}></i>\n                                </button>\n                                <button onClick={() => this.setVideosSortMethod(SORT_BY_SNIPPET_PUBLISHED_AT)} className={videosSortMethod === SORT_BY_SNIPPET_PUBLISHED_AT ? \"text-button active\" : \"text-button\"}>\n                                    added to playlist<i className={videosSortDirection ? \"fas fa-sort-numeric-down\" : \"fas fa-sort-numeric-up\"}></i>\n                                </button>\n                                <button onClick={() => this.setVideosSortMethod(SORT_BY_VIDEO_PUBLISHED_AT)} className={videosSortMethod === SORT_BY_VIDEO_PUBLISHED_AT ? \"text-button active\" : \"text-button\"}>\n                                    video created<i className={videosSortDirection ? \"fas fa-sort-numeric-down\" : \"fas fa-sort-numeric-up\"}></i>\n                                </button>\n                                <button onClick={() => this.setVideosSortMethod(SORT_BY_SNIPPET_POSITION)} className={videosSortMethod === SORT_BY_SNIPPET_POSITION ? \"text-button active\" : \"text-button\"}>\n                                    position<i className={videosSortDirection ? \"fas fa-sort-numeric-down\" : \"fas fa-sort-numeric-up\"}></i>\n                                </button>\n                            </div>\n                        </div>\n                        <div className=\"column-content\">\n                            {visiblePlaylists\n                                .map((playlist, index) => {\n                                    return (\n                                        <div key={index} className={`row clickable ${playlist.id === playlistId ? 'selected' : ''}`} onClick={() => this.selectPlaylist(playlist.id)}>\n                                            <div className=\"row-main\">{playlist.snippet.title} ({playlist.contentDetails.itemCount}{' '} videos)</div>\n                                            <div className=\"row-option\"><a href={`https://www.youtube.com/playlist?list=${playlist.id}`} target=\"_blank\" rel=\"noopener noreferrer\">open in YouTube <i className=\"fas fa-external-link-alt\"></i></a></div>\n                                        </div>\n                                    );\n                                })}\n                        </div>\n                        <div className=\"column-content\">\n                            {(playlistId === null) &&\n                            <div>\n                                <span className=\"italic\">Please select a playlist</span>\n                            </div>\n                            }\n                            {(playlistId !== null) && (visibleVideos.length === 0) &&\n                            <div>\n                                <span className=\"italic\">Empty playlist</span>\n                            </div>\n                            }\n                            {visibleVideos\n                                .map((video, index) => {\n                                    return (\n                                        <div key={index} className=\"row\">\n                                            <a href={`https://www.youtube.com/watch?v=${video.contentDetails.videoId}`} target=\"_blank\" rel=\"noopener noreferrer\">{video.snippet.title}</a>\n                                        </div>\n                                    );\n                                })}\n                        </div>\n                    </div>\n                );\n            } else {\n                return <div className=\"default-content\">Retrieving the playlists...</div>;\n            }\n        }\n    }\n}\n\nexport default PlaylistsVideos;\n","import React, {Component, Fragment} from 'react';\nimport {\n    buildPlaylistsRequest,\n    buildPlaylistItemsRequest,\n    executeRequest,\n    moveMultipleIntoPlaylist,\n    copyMultipleIntoPlaylist, removeMultipleFromPlaylist,\n} from '../utils/gapi';\nimport './Videos.css';\nimport {produce} from \"immer\";\nimport {\n    contentDetailsPublishedAtSort,\n    contentDetailsPublishedAtSortReverse,\n    snippetPositionSort,\n    snippetPositionSortReverse,\n    snippetPublishedAtSort,\n    snippetPublishedAtSortReverse,\n    snippetTitleSort,\n    snippetTitleSortReverse,\n    SORT_ASCENDING, SORT_BY_SNIPPET_POSITION,\n    SORT_BY_SNIPPET_PUBLISHED_AT,\n    SORT_BY_SNIPPET_TITLE,\n    SORT_BY_VIDEO_PUBLISHED_AT\n} from \"../utils/sorting\";\n\n// const SORT_BY_SNIPPET_TITLE = \"snippetTitle\";\n// const SORT_BY_SNIPPET_PUBLISHED_AT = \"snippetPublishedAt\";\n// const SORT_BY_SNIPPET_POSITION = \"snippetPosition\";\n// const SORT_BY_VIDEO_PUBLISHED_AT = \"videoPublishedAt\";\n// const SORT_ASCENDING = true;    // false means sort descending\n\nconst LEFT = 0;\nconst RIGHT = 1;\n\nclass VideosVideos extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isAuthorized: false,\n            videosLoading: false,\n            playlists: null,\n            sync: false,\n            lists: [{\n                playlistId: null,\n                videos: [],\n                filter: '',\n                sortMethod: SORT_BY_SNIPPET_TITLE,\n                sortDirection: SORT_ASCENDING,\n                errorMessage: null,\n                progressMessage: null,\n                marked: []      // list of VideoId (ID within the playlist)\n            },{\n                playlistId: null,\n                videos: [],\n                filter: '',\n                sortMethod: SORT_BY_SNIPPET_TITLE,\n                sortDirection: SORT_ASCENDING,\n                errorMessage: null,\n                progressMessage: null,\n                marked: []      // list of VideoId (ID within the playlist)\n            }]\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.isAuthorized !== state.isAuthorized) {\n            return {\n                isAuthorized: props.isAuthorized,\n            };\n        }\n        // No state update necessary\n        return null;\n    }\n\n    componentDidMount() {\n        if (this.state.isAuthorized) this.refresh();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (!this.state.isAuthorized) return;\n        if (this.state.playlists === null) {\n            // Only retrieve data if state.playlists is empty; otherwise this will generate an endless loop.\n            this.retrievePlaylists();\n        }\n    }\n\n    setSortMethod = (listIndex, method) => {\n        // if same method, then flip the direction\n        this.setState(\n            produce(draft => {\n                for (let i=0; i<draft.lists.length; i++) {\n                    if ((i === listIndex) || draft.sync) {\n                        if (draft.lists[i].sortMethod === method) {\n                            draft.lists[i].sortDirection = !draft.lists[i].sortDirection;\n                        } else {\n                            draft.lists[i].sortMethod = method;\n                        }\n                    }\n                }\n            })\n        );\n    };\n\n    getSortFunction = (listIndex) => {\n        let asc = this.state.lists[listIndex].sortDirection;\n        switch(this.state.lists[listIndex].sortMethod) {\n            case SORT_BY_SNIPPET_TITLE : return asc ? snippetTitleSort : snippetTitleSortReverse;\n            case SORT_BY_SNIPPET_PUBLISHED_AT : return asc ? snippetPublishedAtSort : snippetPublishedAtSortReverse;\n            case SORT_BY_SNIPPET_POSITION : return asc ? snippetPositionSort : snippetPositionSortReverse;\n            case SORT_BY_VIDEO_PUBLISHED_AT : return asc ? contentDetailsPublishedAtSort : contentDetailsPublishedAtSortReverse;\n            default : return snippetTitleSort;\n        }\n    };\n\n    storePlaylists = data => {\n        if (!data) return;\n        let list = data.items;\n        list.sort(snippetTitleSort);\n        this.setState({ playlists: list });\n    };\n\n    storeVideos = (listIndex, data, currentToken) => {\n\n        if (!data) return;\n\n        let list = data.items;\n        list.sort(snippetTitleSort);\n\n        this.setState(\n            produce(draft => {\n                if (currentToken === undefined || !currentToken) {\n                    draft.lists[listIndex].videos = list;\n                } else {\n                    draft.lists[listIndex].videos = [...draft.lists[listIndex].videos, ...list]\n                }\n            })\n        );\n\n        if (data.nextPageToken) {\n            this.retrieveVideos(listIndex, data.nextPageToken);\n        }\n    };\n\n    retrieveVideos = (listIndex, nextPageToken) => {\n        this.setState({ errorMessage: null, videosLoading: true });\n        executeRequest(\n            buildPlaylistItemsRequest(this.state.lists[listIndex].playlistId, nextPageToken),\n            data => this.storeVideos(listIndex, data, nextPageToken)\n        );\n    };\n\n    retrievePlaylists = () => {\n        executeRequest(buildPlaylistsRequest(), this.storePlaylists);\n    };\n\n    refreshPlaylists = () => {\n        this.retrievePlaylists();\n    };\n\n    refreshPlaylist = (listIndex) => {\n        this.setState(\n            produce(draft => {\n                draft.lists[listIndex].errorMessage = null;\n                draft.lists[listIndex].videos = [];\n            }),\n            () => this.retrieveVideos(listIndex)\n        );\n    };\n\n    setPlaylist = (event, listIndex) => {\n        let id = event.target.value;\n        this.setState(\n            produce(draft => {\n                draft.lists[listIndex].errorMessage = null;\n                draft.lists[listIndex].playlistId = id;\n            }),\n            () => this.retrieveVideos(listIndex)\n        );\n    };\n\n    removeFromPlaylistState = (listIndex, playlistItemIds) => {\n        this.setState(\n            produce(draft => {\n                let videos = draft.lists[listIndex].videos;\n                for (let i=0; i<playlistItemIds.length; i++) {\n                    let k = videos.findIndex(video => video.id === playlistItemIds[i]);\n                    if (k >= 0) videos.splice(k, 1);\n                }\n                draft.lists[listIndex].videos = videos;\n                draft.lists[listIndex].errorMessage = null;\n            })  //,\n            //() => this.retrieveVideos(playlistIndex)\n        );\n    };\n\n    /**\n     * returns true if videoId is in list[listIndex]\n     */\n    inPlaylist = (videoId, listIndex) => {\n        const videos = this.state.lists[listIndex].videos;\n        for (let i=0; i<videos.length; i++) {\n            if (videos[i].contentDetails.videoId === videoId) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    getVisibleIds = listIndex => {\n\n        let filter = this.state.lists[listIndex].filter.toLowerCase();\n\n        let playlistItemIds = [];\n        let videoIds = [];\n\n        this.state.lists[listIndex].videos\n            .filter(playlistItem => playlistItem.snippet.title.toLowerCase().indexOf(filter) > -1)\n            .forEach(playlistItem => {\n                playlistItemIds.push(playlistItem.id);\n                if (!videoIds.includes(playlistItem.contentDetails.videoId)) {\n                    videoIds.push(playlistItem.contentDetails.videoId); // avoid pushing duplicates\n                }\n            });\n\n        return {\n            playlistItemIds,\n            videoIds\n        }\n    };\n\n    getVisibleAndUniqueIds = (listIndex, targetIndex) => {\n\n        let filter = this.state.lists[listIndex].filter.toLowerCase();\n\n        let playlistItemIds = [];\n        let videoIds = [];\n\n        this.state.lists[listIndex].videos\n            .filter(playlistItem => playlistItem.snippet.title.toLowerCase().indexOf(filter) > -1)\n            .forEach(playlistItem => {\n                if (!this.inPlaylist(playlistItem.contentDetails.videoId, targetIndex)) {\n                    playlistItemIds.push(playlistItem.id);\n                    if (!videoIds.includes(playlistItem.contentDetails.videoId)) {\n                        videoIds.push(playlistItem.contentDetails.videoId); // avoid pushing duplicates\n                    }\n                }\n            });\n\n        return {\n            playlistItemIds,\n            videoIds\n        }\n    };\n\n\n    mark = (listIndex, playlistItemIds) => {\n        this.setState(\n            produce(draft => {\n                draft.lists[listIndex].marked = Array.isArray(playlistItemIds) ? playlistItemIds : [playlistItemIds];   // IDs within the playlist\n            })\n        );\n    };\n\n    clearMarked = (listIndex) => {\n        this.setState(\n            produce(draft => {\n                draft.lists[listIndex].progressMessage = null;\n                draft.lists[listIndex].marked = [];\n            })\n        );\n    };\n\n    progress = (listIndex, {index, total, operation, videoId, playlistItemId}) => {\n        this.setState(\n            produce(draft => {\n                draft.lists[listIndex].progressMessage = `${index}/${total}: ${operation} ${videoId}`;\n                let k = draft.lists[listIndex].marked.findIndex(id => id === playlistItemId);\n                if (k >= 0) draft.lists[listIndex].marked.splice(k, 1);\n            })\n        );\n    };\n\n    failure = (listIndex, error) => {\n        this.setState(\n            produce(draft => {\n                draft.lists[listIndex].errorMessage = error.message;\n            })\n        );\n    };\n\n    copy = (sourceListIndex, targetListIndex, playlistItemId, videoId) => {\n        if (this.inPlaylist(videoId, targetListIndex)) return;\n        this.mark(sourceListIndex, playlistItemId);\n        copyMultipleIntoPlaylist(\n            [playlistItemId],\n            [videoId],\n            this.state.lists[targetListIndex].playlistId,\n            (data) => this.progress(sourceListIndex, data),\n            () => {\n                this.retrievePlaylists();   // update the number of videos per playlist displayed in the dropdown select\n                this.refreshPlaylist(targetListIndex);\n            },\n            (data) => this.failure(sourceListIndex, data.error));\n    };\n\n    copyAll = (sourceListIndex, targetListIndex) => {\n        const { playlistItemIds, videoIds } = this.getVisibleAndUniqueIds(sourceListIndex, targetListIndex);\n        if (videoIds.length === 0) {\n            return;\n        }\n        this.mark(sourceListIndex, playlistItemIds);\n        copyMultipleIntoPlaylist(\n            playlistItemIds,\n            videoIds,\n            this.state.lists[targetListIndex].playlistId,\n            (data) => this.progress(sourceListIndex, data),\n            () => {\n                this.retrievePlaylists();   // update the number of videos per playlist displayed in the dropdown select\n                this.refreshPlaylist(targetListIndex);\n                this.clearMarked(sourceListIndex);\n            },\n            (data) => this.failure(sourceListIndex, data.error));\n    };\n\n    move = (sourceListIndex, targetListIndex, playlistItemId, videoId) => {\n        if (this.inPlaylist(videoId, targetListIndex)) return;\n        this.mark(sourceListIndex, playlistItemId);\n        moveMultipleIntoPlaylist(\n            [playlistItemId],\n            [videoId],\n            this.state.lists[targetListIndex].playlistId,\n            (data) => {\n                this.progress(sourceListIndex, data);\n                this.removeFromPlaylistState(sourceListIndex, [data.playlistItemId]);\n            },\n            () => {\n                this.retrievePlaylists();   // update the number of videos per playlist displayed in the dropdown select\n                this.refreshPlaylist(targetListIndex);\n                this.clearMarked(sourceListIndex);\n            },\n            (data) => this.failure(sourceListIndex, data.error));\n    };\n\n    moveAll = (sourceListIndex, targetListIndex) => {\n        const { playlistItemIds, videoIds } = this.getVisibleAndUniqueIds(sourceListIndex, targetListIndex);\n        if (videoIds.length === 0) {\n            return;\n        }\n        this.mark(sourceListIndex, playlistItemIds);\n        moveMultipleIntoPlaylist(\n            playlistItemIds,\n            videoIds,\n            this.state.lists[targetListIndex].playlistId,\n            (data) => {\n                this.progress(sourceListIndex, data);\n                this.removeFromPlaylistState(sourceListIndex, [data.playlistItemId]);\n            },\n            () => {\n                this.retrievePlaylists();   // update the number of videos per playlist displayed in the dropdown select\n                this.refreshPlaylist(targetListIndex);\n                this.clearMarked(sourceListIndex);\n            },\n            (data) => this.failure(sourceListIndex, data.error));\n    };\n\n    remove = (listIndex, playlistItemId, videoId) => {\n        this.mark(listIndex, playlistItemId);\n        removeMultipleFromPlaylist(\n            [playlistItemId],\n            [videoId],\n            this.state.lists[listIndex].playlistId,\n            (data) => this.progress(listIndex, data),\n            () => {\n                this.removeFromPlaylistState(listIndex, [playlistItemId]);\n                this.clearMarked(listIndex);\n            },\n            (data) => this.failure(listIndex, data.error));\n\n    };\n\n    removeAll = (listIndex) => {\n        const { playlistItemIds, videoIds } = this.getVisibleIds(listIndex);\n        this.mark(listIndex, playlistItemIds);\n        removeMultipleFromPlaylist(\n            playlistItemIds,\n            videoIds,\n            this.state.lists[listIndex].playlistId,\n            (data) => this.progress(listIndex, data),\n            () => {\n                this.removeFromPlaylistState(listIndex, playlistItemIds);\n                this.clearMarked(listIndex);\n            },\n            (data) => this.failure(listIndex, data.error));\n    };\n\n    updateFilter = (event, listIndex) => {\n        let f = event.target.value;\n        this.setState(\n            produce(draft => {\n                for (let i=0; i<draft.lists.length; i++) {\n                    if (draft.sync || i === listIndex) {\n                        draft.lists[i].errorMessage = null;\n                        draft.lists[i].filter = f;\n                    }\n                }\n            })\n        );\n    };\n\n    clearFilter = listIndex => {\n        this.setState(\n            produce(draft => {\n                draft.lists[listIndex].filter = '';\n            })\n        );\n    };\n\n    refresh = (listIndex, clearFilter = false) => {\n        if (!this.state.isAuthorized) return;\n        this.setState(\n            produce(draft => {\n                draft.videosLoading = false;\n                draft.playlists = null;\n                for (let i=0; i<draft.lists; i++) {\n                    draft.lists[i] = {\n                        playlistId: null,\n                        videos: [],\n                        filter: clearFilter ? '' : draft.lists[i].filter,\n                        errorMessage: null\n                    }\n                }\n            }),\n            () => this.retrievePlaylists()\n        );\n    };\n\n    dismissErrorMessage = (listIndex) => {\n        this.setState(produce(draft => {\n            draft.lists[listIndex].errorMessage = null;\n        }));\n    };\n\n    toggleSync = () => {\n        this.setState({sync: !this.state.sync});\n    };\n\n\n    render() {\n\n        const { isAuthorized, playlists, lists, sync } = this.state;\n\n        const filters = [\n            lists[LEFT].filter.toLowerCase(),\n            lists[RIGHT].filter.toLowerCase()\n        ];\n\n        const visibleVideos = [\n            lists[LEFT].videos\n                .filter(video => video.snippet.title.toLowerCase().indexOf(filters[LEFT]) > -1)\n                .sort(this.getSortFunction(LEFT)),\n            lists[RIGHT].videos\n                .filter(video => video.snippet.title.toLowerCase().indexOf(filters[RIGHT]) > -1)\n                .sort(this.getSortFunction(RIGHT))\n        ];\n\n        const bigHeader = visibleVideos[LEFT].length > 0 || visibleVideos[RIGHT].length > 0;\n\n\n        if (!isAuthorized) {\n            return null;\n        } else {\n            return (\n                <div className={bigHeader ? \"two-columns-headers big-height\" : \"two-columns-headers short-height\"}>\n\n                    {[LEFT, RIGHT].map(\n                        (listIndex, index) => {\n                            const sortMethod = lists[listIndex].sortMethod;\n                            const sortDirection = lists[listIndex].sortDirection;\n                            return (\n                                <div className=\"column-header\" key={index}>\n                                    {playlists &&\n                                    <div className=\"playlist-selector\">\n                                        <select onChange={(event) => this.setPlaylist(event, listIndex)}>\n                                            <option defaultValue={lists[listIndex].playlistId}>select playlist...</option>\n                                            {playlists.map((p, i) => <option key={i} value={p.id}>{p.snippet.title} ({p.contentDetails.itemCount})</option>)}\n                                        </select> <button onClick={this.refreshPlaylists}>refresh</button>\n                                        {' '}\n                                        {lists[listIndex].playlistId && <a href={`https://www.youtube.com/playlist?list=${lists[listIndex].playlistId}`} target=\"_blank\" rel=\"noopener noreferrer\">open in YouTube</a>}\n                                    </div>\n                                    }\n                                    {lists[listIndex].errorMessage &&\n                                    <div className=\"messages\">\n                                        <div className=\"error\">{lists[listIndex].errorMessage}<div className=\"dismiss\"><button onClick={() => this.dismissErrorMessage(listIndex)}>dismiss</button></div></div>\n                                    </div>\n                                    }\n                                    {lists[listIndex].playlistId &&\n                                    <div className=\"infos\">\n                                        There are {lists[listIndex].videos.length} videos in this playlist.\n                                        {lists[listIndex].videos.length > 0 && <button onClick={() => this.refreshPlaylist(listIndex)}>refresh the list of videos</button>}\n                                    </div>\n                                    }\n                                    {/* lists[listIndex].progressMessage &&\n                                    <div className=\"progress\">\n                                        {lists[listIndex].progressMessage}\n                                    </div>\n                                    */}\n                                    {lists[listIndex].videos && lists[listIndex].videos.length > 0 &&\n                                    <Fragment>\n                                        <div className=\"filtering\">\n                                            {listIndex === 0 &&\n                                            <div className=\"sync\">\n                                                <button onClick={this.toggleSync}>sync filter&sorting: {sync ? \"ON\" : \"OFF\"}</button>\n                                            </div>\n                                            }\n                                            <div className=\"filter\">\n                                                Filter: <input type=\"text\" value={lists[listIndex].filter}\n                                                               onChange={(event) => this.updateFilter(event, listIndex)}/>\n                                                <button onClick={() => this.clearFilter(listIndex)}>clear filter\n                                                </button>\n                                                {visibleVideos[listIndex].length} videos shown\n                                            </div>\n                                        </div>\n                                        {visibleVideos[listIndex].length > 0 &&\n                                        <Fragment>\n                                            {listIndex % 2\n                                                ? <div className=\"batch-actions\">\n                                                    Apply to all videos shown below:\n                                                    <button title=\"remove shown videos from the playlist\" onClick={() => this.removeAll(listIndex)}><i className=\"fas fa-trash-alt\"></i> remove all</button>\n                                                    <button onClick={() => this.copyAll(listIndex, listIndex - 1)}><i className=\"fas fa-angle-double-left\"></i> copy all</button>\n                                                    <button onClick={() => this.moveAll(listIndex, listIndex - 1)}><i className=\"fas fa-angle-left\"></i> move all</button>\n                                                </div>\n                                                : <div className=\"batch-actions\">\n                                                        Apply to all videos shown below:\n                                                    <button title=\"remove shown videos from the playlist\" onClick={() => this.removeAll(listIndex)}><i className=\"fas fa-trash-alt\"></i> remove all</button>\n                                                    <button onClick={() => this.copyAll(listIndex, listIndex + 1)}>copy all <i className=\"fas fa-angle-double-right\"></i></button>\n                                                    <button onClick={() => this.moveAll(listIndex, listIndex + 1)}>move all <i className=\"fas fa-angle-right\"></i></button>\n                                                </div>\n                                            }\n                                        </Fragment>\n                                        }\n                                        <div className=\"sorting\">\n                                            <button onClick={() => this.setSortMethod(listIndex, SORT_BY_SNIPPET_TITLE)}\n                                                    className={sortMethod === SORT_BY_SNIPPET_TITLE ? \"text-button active\" : \"text-button\"}>\n                                                title<i className={sortDirection ? \"fas fa-sort-alpha-down\" : \"fas fa-sort-alpha-up\"}></i>\n                                            </button>\n                                            <button\n                                                onClick={() => this.setSortMethod(listIndex, SORT_BY_SNIPPET_PUBLISHED_AT)}\n                                                className={sortMethod === SORT_BY_SNIPPET_PUBLISHED_AT ? \"text-button active\" : \"text-button\"}>\n                                                added to playlist<i className={sortDirection ? \"fas fa-sort-numeric-down\" : \"fas fa-sort-numeric-up\"}></i>\n                                            </button>\n                                            <button\n                                                onClick={() => this.setSortMethod(listIndex, SORT_BY_VIDEO_PUBLISHED_AT)}\n                                                className={sortMethod === SORT_BY_VIDEO_PUBLISHED_AT ? \"text-button active\" : \"text-button\"}>\n                                                video created<i className={sortDirection ? \"fas fa-sort-numeric-down\" : \"fas fa-sort-numeric-up\"}></i>\n                                            </button>\n                                            <button\n                                                onClick={() => this.setSortMethod(listIndex, SORT_BY_SNIPPET_POSITION)}\n                                                className={sortMethod === SORT_BY_SNIPPET_POSITION ? \"text-button active\" : \"text-button\"}>\n                                                position<i className={sortDirection ? \"fas fa-sort-numeric-down\" : \"fas fa-sort-numeric-up\"}></i>\n                                            </button>\n                                        </div>\n                                    </Fragment>\n                                    }\n                                </div>\n\n                            );\n                        }\n                    )}\n\n                    {[LEFT, RIGHT].map(\n                        (listIndex, index) => {\n                            const list = lists[listIndex];\n                            return (\n                                <div className=\"column-content\" key={index}>\n                                    {lists[listIndex].progressMessage &&\n                                    <div className=\"progress\">\n                                        {lists[listIndex].progressMessage}\n                                    </div>\n                                    }\n                                    {visibleVideos[listIndex] && visibleVideos[listIndex].length > 0 &&\n                                    <Fragment>\n                                    {\n                                        visibleVideos[listIndex].map((video, index) => {\n                                            let m = list.marked.includes(video.id) ? 'marked' : '';\n                                            return (\n                                                <div key={index} className={`row row-${index % 2} ${m}`}>\n                                                    {listIndex % 2\n                                                        ? <div className=\"buttons\">\n                                                            <button className=\"action-button\" onClick={\n                                                                () => this.move(listIndex, listIndex - 1,\n                                                                    video.id, /* ID within the playlist */\n                                                                    video.contentDetails.videoId /* ID within youtube */\n                                                                )}>\n                                                                <i className=\"fas fa-angle-left\"></i> move\n                                                            </button>\n                                                            <button className=\"action-button space-around\" onClick={\n                                                                () => this.copy(listIndex, listIndex - 1,\n                                                                    video.id, /* ID within the playlist */\n                                                                    video.contentDetails.videoId /* ID within youtube */\n                                                                )}>\n                                                                <i className=\"fas fa-angle-double-left\"></i> copy\n                                                            </button>\n                                                        </div>\n                                                        : <div>\n                                                            <button className=\"action-button remove-button\" title=\"remove from this playlist\" onClick={\n                                                                () => this.remove(listIndex,\n                                                                    video.id, /* ID within the playlist */\n                                                                    video.contentDetails.videoId /* ID within youtube */\n                                                                )}>\n                                                                <i className=\"fas fa-trash-alt\"></i>\n                                                            </button>\n                                                        </div>\n                                                    }\n                                                    <div className={listIndex % 2 ? \"video-title space-right\" : \"video-title space-left\"}>\n                                                        <a href={`https://www.youtube.com/watch?v=${video.contentDetails.videoId}`} target=\"_blank\" rel=\"noopener noreferrer\">{video.snippet.title}</a>\n                                                    </div>\n                                                    {listIndex % 2\n                                                        ? <div>\n                                                            <button className=\"action-button remove-button\" title=\"remove from this playlist\" onClick={\n                                                                () => this.remove(listIndex,\n                                                                    video.id, /* ID within the playlist */\n                                                                    video.contentDetails.videoId /* ID within youtube */\n                                                                )}>\n                                                                <i className=\"fas fa-trash-alt\"></i>\n                                                            </button>\n                                                        </div>\n                                                        : <div className=\"buttons\">\n                                                            <button className=\"action-button space-around\" onClick={\n                                                                () => this.copy(listIndex, listIndex + 1,\n                                                                    video.id, /* ID within the playlist */\n                                                                    video.contentDetails.videoId /* ID within youtube */\n                                                                )}>copy <i className=\"fas fa-angle-double-right\"></i>\n                                                            </button>\n                                                            <button className=\"action-button\" onClick={\n                                                                () => this.move(listIndex, listIndex + 1,\n                                                                    video.id, /* ID within the playlist */\n                                                                    video.contentDetails.videoId /* ID within youtube */\n                                                                )}>move <i className=\"fas fa-angle-right\"></i>\n                                                            </button>\n                                                        </div>\n                                                    }\n                                                </div>\n                                            )}\n                                        )\n                                    }\n                                    </Fragment>}\n\n                                </div>\n                            );\n                        }\n                    )}\n                </div>\n            );\n        }\n    }\n\n}\n\nexport default VideosVideos;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Playlists from './components/Playlists';\nimport Videos from './components/Videos';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport Channels from './components/Channels';\nimport Subscriptions from \"./components/Subscriptions\";\nimport PlaylistsVideos from \"./components/PlaylistsVideos\";\nimport VideosVideos from \"./components/VideosVideos\";\n// import { library } from '@fortawesome/fontawesome-svg-core'\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n//\n// library.add(faAngleDoubleRight);\n\n\n/*\n    gapi.load\n    gapi.client.init\n    gapi.auth2.getAuthInstance\n    <authorize button>\n    instance.signIn\n    user.getBasicProfile\n*/\n\nclass App extends Component {\n    //TODO: toggle authorized button once authorized\n\n    state = {\n        google_api: null,\n        user: null,\n        isAuthorized: false,\n    };\n\n    /**\n     * Called on update of sign-in status\n     */\n    setSigninStatus = () => {\n        // console.log('setSigninStatus', this.state.google_api);\n        if (this.state.google_api) {\n            // console.log(\"* instance.currentUser.get()\");\n            let user = this.state.google_api.currentUser.get();\n\n            // console.log(\"setSigninStatus: user\", user);\n\n            let isAuthorized = user.hasGrantedScopes(\n                'https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtubepartner'\n            );\n            this.setState({\n                user: user,\n                isAuthorized: isAuthorized,\n            });\n        }\n    };\n\n    updateSigninStatus = () => {\n        // console.log(\"updateSigninStatus\");\n        this.setSigninStatus();\n    };\n\n    initClient = () => {\n        // console.log('initClient');\n\n        window.gapi.client\n            .init({\n                clientId:\n                    '1035406715321-fu4ktringpl82201dm2g9fm674akd203.apps.googleusercontent.com',\n                discoveryDocs: [\n                    'https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest',\n                ],\n                scope:\n                    'https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtubepartner', //,\n                // 'access_type': 'offline'\n            })\n            .then(() => {\n                // console.log('initClient: success');\n\n                // console.log(\"* gapi.auth2.getAuthInstance\");\n                let inst = window.gapi.auth2.getAuthInstance(); // https://developers.google.com/api-client-library/javascript/reference/referencedocs#gapiauth2getauthinstance\n                // console.log(\"initClient: google_api\", inst);\n\n                // Listen for sign-in state changes\n                inst.isSignedIn.listen(this.updateSigninStatus);\n\n                // Handle initial sign-in state. (Determine if user is already signed in.)\n                this.setSigninStatus();\n                this.setState({ google_api: inst });\n            })\n            .catch(function(e) {\n                console.warn('initClient: auth error: ', e);\n            });\n    };\n\n    authorize = () => {\n\n        // console.log('authorize');\n\n        let auth = window.gapi.auth2.getAuthInstance();\n/*\n        auth.grantOfflineAccess().then(function(resp) {\n            // console.log(\"authorize grantOfflineAccess\",resp);\n            // var auth_code = resp.code;\n        });\n*/\n        auth.grantOfflineAccess();\n\n        this.state.google_api.signIn().then(user => {\n            let p = user.getBasicProfile();\n            let isAuthorized = user.hasGrantedScopes('https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtubepartner');\n            this.setState({\n                user: user,\n                userProfile: p,\n                isAuthorized: isAuthorized,\n            });\n        });\n    };\n\n    grantAccess = () => {\n\n        let auth = window.gapi.auth2.getAuthInstance();\n\n        // https://stackoverflow.com/questions/32848870/googleuser-object-does-not-have-grantofflineaccess-method\n/*\n        auth.grantOfflineAccess({\n            // authuser: user.getAuthResponse().session_state.extraQueryParams.authuser\n            prompt: 'consent',\n        }).then(function(resp) {\n            var auth_code = resp.code;\n            // !!! Allow popup\n        });\n*/\n        auth.grantOfflineAccess();\n    };\n\n    componentDidMount() {\n        // https://developers.google.com/api-client-library/javascript/reference/referencedocs\n\n        // Here we use gapi.load('client:auth2', ...) to load both the client module (for dealing with API requests)\n        // and the auth2 module (for dealing with OAuth 2.0) upfront. The gapi.client.init fuction lazily loads auth2\n        // if it is needed. If you are sure your app needs auth, loading the two modules 'client:auth2' together\n        // before you call gapi.client.init will save one script load request.\n        window.gapi.load('client:auth2', this.initClient);\n    }\n\n    render() {\n        const { isAuthorized, userProfile } = this.state;\n\n        return (\n            <Router>\n                <div className=\"App\">\n                    <div className=\"header\">\n                        Youtube Playlist Editor\n                        {isAuthorized && <div className=\"header-info\">\n                            Authorized for {userProfile.getName()}\n                        </div>}\n{/*\n                        <button onClick={this.grantAccess}>Grant access</button>\n                        {isAuthorized ? (\n                            <div className=\"header-info\">\n                                Authorized for {userProfile.getName()}\n                            </div>\n                        ) : (\n                            <span>\n                                <button onClick={this.authorize}>\n                                    Authorize\n                                </button>\n                            </span>\n                        )}\n*/}\n                        {isAuthorized && (\n                            <Link className=\"header-link\" to=\"/playlists-videos\">\n                                Playlists-Videos\n                            </Link>\n                        )}\n                        {isAuthorized && (\n                            <Link className=\"header-link\" to=\"/videos-videos\">\n                                Videos-Videos\n                            </Link>\n                        )}\n                        {isAuthorized && (\n                            <Link className=\"header-link\" to=\"/playlists\">\n                                Playlists\n                            </Link>\n                        )}\n                        {isAuthorized && (\n                            <Link className=\"header-link\" to=\"/subscriptions\">\n                                Subscriptions\n                            </Link>\n                        )}\n                        {isAuthorized && (\n                            <Link className=\"header-link\" to=\"/channels\">\n                                Channels\n                            </Link>\n                        )}\n                    </div>\n                    {!isAuthorized && (\n                        <div className=\"authorization\">\n                            <p>\n                                You need to authorize the application to\n                                access your Youtube playlists.\n                            </p>\n                            <p>\n                                Click the{' '}\n                                <button onClick={this.authorize}>\n                                    Authorize\n                                </button>{' '}\n                                button to allow the access.\n                            </p>\n                        </div>\n                    )}\n                    <Switch>\n                        {/*<Route exact={true} path=\"/\" component={Home}/>*/}\n                        {/*<Route path=\"/playlists\" component={Playlists} />*/}\n                        <Route\n                            path=\"/playlists-videos\"\n                            render={props => (\n                                <PlaylistsVideos\n                                    {...props}\n                                    isAuthorized={isAuthorized}\n                                />\n                            )}\n                        />\n                        <Route\n                            path=\"/videos-videos\"\n                            render={props => (\n                                <VideosVideos\n                                    {...props}\n                                    isAuthorized={isAuthorized}\n                                />\n                            )}\n                        />\n                        <Route\n                            path=\"/playlists\"\n                            render={props => (\n                                <Playlists\n                                    {...props}\n                                    isAuthorized={isAuthorized}\n                                />\n                            )}\n                        />\n                        <Route\n                            path=\"/subscriptions\"\n                            render={props => (\n                                <Subscriptions\n                                    {...props}\n                                    isAuthorized={isAuthorized}\n                                />\n                            )}\n                        />\n                        <Route\n                            path=\"/videos/:playlistid\"\n                            render={props => (\n                                <Videos\n                                    {...props}\n                                    isAuthorized={isAuthorized}\n                                />\n                            )}\n                        />\n                        <Route\n                            path=\"/channels\"\n                            render={props => (\n                                <Channels\n                                    {...props}\n                                    isAuthorized={isAuthorized}\n                                />\n                            )}\n                        />\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log(\n                                'New content is available; please refresh.'\n                            );\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') ===\n                    -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nfunction noop() {}\nif (process.env.NODE_ENV !== 'development') {\n    console.log = noop;\n    console.warn = noop;\n    console.error = noop;\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}