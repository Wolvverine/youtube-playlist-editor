{"version":3,"sources":["utils/gapi.js","utils/sorting.js","components/Playlists.js","components/Videos.js","components/Channels.js","components/TwinVideos.js","components/Subscriptions.js","App.js","registerServiceWorker.js","index.js"],"names":["buildApiRequest","requestMethod","path","params","properties","undefined","window","gapi","client","console","log","request","p","hasOwnProperty","removeEmptyParams","resource","normalizedProps","value","substr","adjustedName","replace","split","propArray","ref","pa","length","key","createResource","body","method","buildPlaylistsRequest","pageToken","mine","part","maxResults","buildPlaylistItemsRequest","playlistId","executeRequest","callback","callbackError","then","response","result","catch","reason","copyMultipleIntoPlaylist","playlistItemIds","videoIds","moveToPlaylistId","progressCallback","successCallback","failureCallback","insertRequests","i","push","snippet.playlistId","snippet.resourceId.kind","snippet.resourceId.videoId","sequence","Promise","resolve","total","_loop","index","operation","videoId","concat","playlistItemId","error","moveMultipleIntoPlaylist","deleteRequests","id","_loop2","t","removeMultipleFromPlaylist","_loop3","r","snippetTitleSort","a","b","snippet","title","toLowerCase","snippetPublishedAtSort","d1","Date","parse","publishedAt","d2","snippetPositionSort","position","contentDetailsPublishedAtSort","contentDetails","snippetTitleSortReverse","snippetPublishedAtSortReverse","snippetPositionSortReverse","contentDetailsPublishedAtSortReverse","Playlists","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","newPlaylistName","event","setState","newPlaylist","target","createPlaylist","state","onBehalfOfContentOwner","snippet.title","snippet.description","snippet.tags[]","snippet.defaultLanguage","status.privacyStatus","resp","retrieve","createError","store","data","currentToken","list","items","sort","prevState","playlists","toConsumableArray","nextPageToken","updateFilter","keyCode","filter","refresh","isAuthorized","prevProps","_this$state","react_default","createElement","onClick","type","onChange","className","onKeyUp","indexOf","map","playlist","Link","to","itemCount","Component","Videos","storePlaylists","storeVideos","videos","retrieveVideos","updatePlaylistName","playlistName","retrievePlaylistName","req","e","TypeError","warn","assertThisInitialized","videosLoading","retrievePlaylists","removeFromPlaylistState","videoItemId","findIndex","splice","removeError","code","message","remove","insertError","move","insertRequest","deleteRequest","movep","moveSuccess","_ref","moveFailure","moveVisible","videoItemIds","video","includes","setMoveToList","f","clearFilter","arguments","match","playlistid","_this2","visibleVideos","defaultValue","href","rel","Channels","channels","relatedPlaylists","keys","name","SORT_BY_SNIPPET_TITLE","SORT_BY_SNIPPET_PUBLISHED_AT","SORT_BY_SNIPPET_POSITION","SORT_BY_VIDEO_PUBLISHED_AT","SORT_ASCENDING","TwinVideos","setSortMethod","listIndex","produce","draft","lists","sortMethod","sortDirection","getSortFunction","asc","errorMessage","refreshPlaylists","refreshPlaylist","setPlaylist","k","getVisibleIds","playlistItem","forEach","mark","marked","Array","isArray","clearMarked","progressMessage","progress","failure","copy","sourceListIndex","targetListIndex","copyAll","_this$getVisibleIds","moveAll","_this$getVisibleIds2","removeAll","_this$getVisibleIds3","sync","dismissErrorMessage","toggleSync","filt","react","m","Subscriptions","subscriptions","storeChannelPlaylist","channelId","subscriptionsPlaylists","retrieveChannelPlaylists","buildChannelPlaylistsRequest","description","subscription","chanId","resourceId","item","App","google_api","user","setSigninStatus","currentUser","get","hasGrantedScopes","updateSigninStatus","initClient","init","clientId","discoveryDocs","scope","inst","auth2","getAuthInstance","isSignedIn","listen","authorize","grantOfflineAccess","signIn","getBasicProfile","userProfile","grantAccess","prompt","load","BrowserRouter","getName","Switch","Route","render","src_components_Channels","assign","src_components_Subscriptions","src_components_Playlists","src_components_Videos","components_TwinVideos","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","noop","ReactDOM","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.96dfe176.chunk.js","sourcesContent":["export function createResource(properties) {\n    // console.log(\"createResource\");\n    let resource = {};\n    let normalizedProps = properties;\n    for (let p in properties) {\n        let value = properties[p];\n        if (p && p.substr(-2, 2) === '[]') {\n            let adjustedName = p.replace('[]', '');\n            if (value) {\n                normalizedProps[adjustedName] = value.split(',');\n            }\n            delete normalizedProps[p];\n        }\n    }\n    for (let p in normalizedProps) {\n        // Leave properties that don't have values out of inserted resource.\n        if (normalizedProps.hasOwnProperty(p) && normalizedProps[p]) {\n            let propArray = p.split('.');\n            let ref = resource;\n            for (let pa = 0; pa < propArray.length; pa++) {\n                let key = propArray[pa];\n                if (pa === propArray.length - 1) {\n                    ref[key] = normalizedProps[p];\n                } else {\n                    ref = ref[key] = ref[key] || {};\n                }\n            }\n        }\n    }\n    return resource;\n}\n\nexport function removeEmptyParams(params) {\n    // console.log(\"removeEmptyParams\");\n    for (let p in params) {\n        if (\n            params.hasOwnProperty(p) &&\n            (!params[p] || params[p] === 'undefined')\n        ) {\n            delete params[p];\n        }\n    }\n    return params;\n}\n\nexport function buildApiRequest(requestMethod, path, params, properties) {\n    // console.log(\"buildApiRequest\", requestMethod, path, params, properties);\n\n    if (window.gapi.client === undefined || window.gapi.client === null) {\n        console.log('buildApiRequest window.gapi.client is undefined or null');\n        return null;\n    }\n\n    params = removeEmptyParams(params);\n\n    // console.log(\"buildApiRequest params\", params);\n\n    let request;\n    if (properties) {\n        let resource = createResource(properties);\n        console.log('buildApiRequest resource', resource);\n        request = window.gapi.client.request({\n            body: resource,\n            method: requestMethod,\n            path: path,\n            params: params,\n        });\n    } else {\n        request = window.gapi.client.request({\n            method: requestMethod,\n            path: path,\n            params: params,\n        });\n    }\n    return request;\n}\n\nexport function buildPlaylistNameRequest(id) {\n    return buildApiRequest('GET', '/youtube/v3/playlists', {\n        id: id,\n        part: 'snippet,contentDetails'\n    });\n}\n\nexport function buildPlaylistsRequest(pageToken) {\n    return buildApiRequest('GET', '/youtube/v3/playlists', {\n        mine: 'true',\n        part: 'snippet,contentDetails',\n        maxResults: '50',\n        pageToken: pageToken\n    });\n}\n\nexport function buildChannelPlaylistsRequest(channelId, pageToken) {\n    return buildApiRequest('GET', '/youtube/v3/playlists', {\n        channelId: channelId,\n        part: 'snippet,contentDetails',\n        maxResults: '50',\n        pageToken: pageToken\n    });\n}\n\nexport function buildPlaylistItemsRequest(playlistId, pageToken) {\n    return buildApiRequest('GET', '/youtube/v3/playlistItems', {\n        maxResults: '50',\n        part: 'snippet,contentDetails',\n        playlistId: playlistId,\n        pageToken: pageToken\n    });\n}\n\nexport function buildChannelsRequest() {\n    return buildApiRequest('GET', '/youtube/v3/channels', {\n        mine: 'true',\n        part: 'contentDetails'\n    });\n}\n\n\n\nexport function buildSubscriptionsRequest(pageToken) {\n    return buildApiRequest('GET', '/youtube/v3/subscriptions', {\n        mine: 'true',\n        part: 'snippet,contentDetails',\n        maxResults: 50,\n        pageToken: pageToken\n    });\n}\n\n\n/*\nexport function insertInPlaylist(videoId, moveToPlaylistId) {\n    let insertRequest = buildApiRequest(\n        'POST',\n        '/youtube/v3/playlistItems',\n        {\n            part: 'snippet'\n        },\n        {\n            'snippet.playlistId': moveToPlaylistId,\n            'snippet.resourceId.kind': 'youtube#video',\n            'snippet.resourceId.videoId': videoId\n        }\n    );\n\n    return new Promise(function(resolve, reject) {\n        insertRequest\n            .then(function(response) {\n                resolve(response.result);\n            })\n            .catch(function() {\n                reject();\n            });\n    });\n}\n*/\n\nexport function executeRequest(request, callback, callbackError) {\n\n    if (request === undefined || request === null) {\n        console.log('executeRequest request is undefined or null');\n        return;\n    }\n\n    // https://developers.google.com/api-client-library/javascript/reference/referencedocs#gapiclientbatch\n    // https://developers.google.com/api-client-library/javascript/features/promises\n    // gapi.client.Request.then(onFulfilled, onRejected, context)\n\n    request.then(\n        // onFulfilled handler:\n        function(response) {\n            // response:\n            //     An object containing information about the HTTP response.\n            //     Name\t        Type\t            Description\n            //     result\t    *\t                The JSON-parsed result. false if not JSON-parseable.\n            //     body\t        string\t            The raw response string.\n            //     headers\t    object | undefined\tThe map of HTTP response headers.\n            //     status\t    number | undefined\tHTTP status.\n            //     statusText\tstring | undefined\tHTTP status text.\n            if (callback) callback(response.result);\n        }\n    ).catch(\n        (reason) => {\n            if (callbackError) callbackError(reason);\n        }\n    );\n}\n\nexport function copyMultipleIntoPlaylist(\n    playlistItemIds,\n    videoIds,\n    moveToPlaylistId,\n    progressCallback,\n    successCallback,\n    failureCallback) {\n\n    console.log('copyMultipleIntoPlaylist', playlistItemIds, videoIds, moveToPlaylistId);\n\n    if (!moveToPlaylistId) return;\n\n    let insertRequests = [];\n    for (let i = 0; i < videoIds.length; i++) {\n        insertRequests.push(\n            buildApiRequest(\n                'POST',\n                '/youtube/v3/playlistItems',\n                {\n                    part: 'snippet',\n                },\n                {\n                    'snippet.playlistId': moveToPlaylistId,\n                    'snippet.resourceId.kind': 'youtube#video',\n                    'snippet.resourceId.videoId': videoIds[i],\n                }\n            )\n        );\n    }\n\n    // Start off with a promise that always resolves\n    let sequence = Promise.resolve();\n\n    let total = insertRequests.length;\n\n    for (let i = 0; i < total; i++) {\n        sequence = sequence\n            .then(() => {\n                if (progressCallback) {\n                    progressCallback({index: i, total: total, operation: \"copying\", videoId: `${videoIds[i]}`, playlistItemId: `${playlistItemIds[i]}`});\n                }\n            })\n            .then(() => insertRequests[i])\n            .then(() => {\n                if (progressCallback) {\n                    progressCallback({index: i, total: total, operation: \"copied\", videoId: `${videoIds[i]}`, playlistItemId: `${playlistItemIds[i]}`});\n                }\n            });\n    }\n\n    sequence\n        .then(() => {\n            console.log(\"copyMultipleIntoPlaylist: success\");\n            if (successCallback) {\n                successCallback();\n            }\n        })\n        .catch(function(reason) {\n            console.log(\"copyMultipleIntoPlaylist: failure\", reason);\n            if (failureCallback) {\n                failureCallback({\n                    error: reason.result.error //,\n                    // videoId: `${videoIds[i]}`,\n                    // playlistItemId: `${playlistItemIds[i]}`,\n                })\n            }\n        });\n\n}\n\nexport function moveMultipleIntoPlaylist(\n    playlistItemIds,\n    videoIds,\n    moveToPlaylistId,\n    progressCallback,\n    successCallback,\n    failureCallback) {\n\n    // console.log('moveMultipleIntoPlaylist', playlistItemIds, videoIds, moveToPlaylistId);\n\n    if (!moveToPlaylistId) return;\n\n    let insertRequests = [];\n    for (let i = 0; i < videoIds.length; i++) {\n        insertRequests.push(\n            buildApiRequest(\n                'POST',\n                '/youtube/v3/playlistItems',\n                {\n                    part: 'snippet',\n                },\n                {\n                    'snippet.playlistId': moveToPlaylistId,\n                    'snippet.resourceId.kind': 'youtube#video',\n                    'snippet.resourceId.videoId': videoIds[i],\n                }\n            )\n        );\n    }\n\n    let deleteRequests = [];\n    for (let i = 0; i < playlistItemIds.length; i++) {\n        deleteRequests.push(\n            buildApiRequest('DELETE', '/youtube/v3/playlistItems', {\n                id: playlistItemIds[i],\n            })\n        );\n    }\n\n    // Start off with a promise that always resolves\n    let sequence = Promise.resolve();\n\n    let total = insertRequests.length;\n\n    for (let i = 0; i < total; i++) {\n        sequence = sequence\n            .then(() => {\n                if (progressCallback) {\n                    progressCallback({index: i+1, total: total, operation: \"inserting\", videoId: `${videoIds[i]}`, playlistItemId: `${playlistItemIds[i]}`});\n                }\n            })\n            .then(() => insertRequests[i])\n            .then(() => {\n                if (progressCallback) {\n                    progressCallback({index: i+1, total: total, operation: \"removing\", videoId: `${videoIds[i]}`, playlistItemId: `${playlistItemIds[i]}`});\n                }\n            })\n            .then(() => deleteRequests[i])\n            .then(() => {\n                if (progressCallback) {\n                    progressCallback({index: i+1, total: total, operation: \"removed\", videoId: `${videoIds[i]}`, playlistItemId: `${playlistItemIds[i]}`});\n                }\n            });\n    }\n\n    sequence\n        .then(t => {\n            console.log(\"moveMultipleIntoPlaylist: call insertSuccessCallback\");\n            successCallback();\n        })\n        .catch(function(reason) {\n            console.log(\"move failure\", reason);\n            if (failureCallback) {\n                failureCallback({\n                    error: reason.result.error //,\n                    // videoId: `${videoIds[i]}`,\n                    // playlistItemId: `${playlistItemIds[i]}`,\n                })\n            }\n        });\n\n}\n\nexport function removeMultipleFromPlaylist(\n    playlistItemIds,\n    videoIds,\n    playlistId,\n    progressCallback,\n    successCallback,\n    failureCallback) {\n\n    console.log('removeMultipleFromPlaylist', playlistItemIds, videoIds, playlistId);\n\n    if (!playlistId) return;\n\n    let deleteRequests = [];\n    for (let i = 0; i < playlistItemIds.length; i++) {\n        deleteRequests.push(\n            buildApiRequest(\n                'DELETE',\n                '/youtube/v3/playlistItems',\n                {\n                    id: playlistItemIds[i],\n                }\n            )\n        );\n    }\n\n    let total = deleteRequests.length;\n\n    let sequence = Promise.resolve();\n    for (let i = 0; i < total; i++) {\n        sequence = sequence\n            .then(() => {\n                if (progressCallback) {\n                    progressCallback({index: i, total: total, operation: \"removing\", videoId: `${videoIds[i]}`, playlistItemId: `${playlistItemIds[i]}`});\n                }\n            })\n            .then(() => deleteRequests[i])\n            .then(() => {\n                if (progressCallback) {\n                    progressCallback({index: i, total: total, operation: \"removed\", videoId: `${videoIds[i]}`, playlistItemId: `${playlistItemIds[i]}`});\n                }\n            });\n    }\n\n    sequence\n        .then(r => {\n            successCallback();\n        })\n        .catch(function(reason) {\n            console.log(\"remove failure\", reason);\n            if (failureCallback) {\n                failureCallback({\n                    error: reason.result.error //,\n                    // videoId: `${videoIds[i]}`,\n                    // playlistItemId: `${playlistItemIds[i]}`,\n                })\n            }\n        });\n\n}\n","\nexport function snippetTitleSort(a, b) {\n    return a.snippet.title.toLowerCase() > b.snippet.title.toLowerCase() ? 1 :\n        b.snippet.title.toLowerCase() > a.snippet.title.toLowerCase() ? -1 :\n            0;\n}\n\nexport function snippetPublishedAtSort(a, b) {\n    let d1 = Date.parse(a.snippet.publishedAt);\n    let d2 = Date.parse(b.snippet.publishedAt);\n    return d1 > d2 ? 1 :\n        d2 > d1 ? -1 :\n            0;\n}\n\nexport function snippetPositionSort(a, b) {\n    return a.snippet.position > b.snippet.position ? 1 :\n        b.snippet.position > a.snippet.position ? -1 :\n            0;\n}\n\nexport function contentDetailsPublishedAtSort(a, b) {\n    let d1 = Date.parse(a.contentDetails.publishedAt);\n    let d2 = Date.parse(b.contentDetails.publishedAt);\n    return d1 > d2 ? 1 :\n        d2 > d1 ? -1 :\n            0;\n}\n\nexport function snippetTitleSortReverse(b, a) {\n    return a.snippet.title.toLowerCase() > b.snippet.title.toLowerCase() ? 1 :\n        b.snippet.title.toLowerCase() > a.snippet.title.toLowerCase() ? -1 :\n            0;\n}\n\nexport function snippetPublishedAtSortReverse(b, a) {\n    let d1 = Date.parse(a.snippet.publishedAt);\n    let d2 = Date.parse(b.snippet.publishedAt);\n    return d1 > d2 ? 1 :\n        d2 > d1 ? -1 :\n            0;\n}\n\nexport function snippetPositionSortReverse(b, a) {\n    return a.snippet.position > b.snippet.position ? 1 :\n        b.snippet.position > a.snippet.position ? -1 :\n            0;\n}\n\nexport function contentDetailsPublishedAtSortReverse(b, a) {\n    let d1 = Date.parse(a.contentDetails.publishedAt);\n    let d2 = Date.parse(b.contentDetails.publishedAt);\n    return d1 > d2 ? 1 :\n        d2 > d1 ? -1 :\n            0;\n}\n","import React, { Component } from 'react';\nimport {\n    buildApiRequest,\n    buildPlaylistsRequest,\n    executeRequest,\n} from '../utils/gapi';\nimport { Link } from 'react-router-dom';\nimport './Playlists.css';\nimport {snippetTitleSort} from \"../utils/sorting\";\n\n/**\n * Display the list of playlists of the authorized user.\n */\nclass Playlists extends Component {\n\n    constructor(props) {\n        super(props);\n        console.log('Playlists.constructor', props);\n        this.state = {\n            isAuthorized: false,\n            playlists: null,\n            newPlaylist: '',\n            filter: '',\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        console.log('Playlists.getDerivedStateFromProps', props);\n        if (props.isAuthorized !== state.isAuthorized) {\n            return {\n                isAuthorized: props.isAuthorized,\n            };\n        }\n\n        // No state update necessary\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        console.log('Playlists.componentDidUpdate');\n        // At this point, we're in the \"commit\" phase, so it's safe to load the new data.\n        if (this.state.isAuthorized && this.state.playlists === null) {\n            // !!! only retrieve data if state.playlists is empty; otherwise this will generate an endless loop.\n            this.retrieve();\n        }\n    }\n\n    newPlaylistName = event => {\n        console.log('Playlists.newPlaylistName');\n        this.setState({ newPlaylist: event.target.value });\n    };\n\n    createPlaylist = () => {\n        if (!this.state.newPlaylist) return;\n        let request = buildApiRequest(\n            'POST',\n            '/youtube/v3/playlists',\n            {\n                part: 'snippet,status',\n                onBehalfOfContentOwner: '',\n            },\n            {\n                'snippet.title': this.state.newPlaylist,\n                'snippet.description': '',\n                'snippet.tags[]': '',\n                'snippet.defaultLanguage': '',\n                'status.privacyStatus': 'private', // unlisted, private, public    https://developers.google.com/youtube/v3/docs/playlists#resource\n            }\n        );\n        //executeRequest(request, () => { this.insertSuccess(videoItemId) }, this.insertError);\n        executeRequest(\n            request,\n            resp => {\n                console.log('created playlist', resp);\n                this.retrieve();\n            },\n            this.createError\n        );\n    };\n\n\n    store = (data, currentToken) => {\n        console.log('Playlists.store');\n\n        if (!data) return;\n\n        let list = data.items;\n        list.sort(snippetTitleSort);\n\n        if (currentToken === undefined || !currentToken) {\n            this.setState({ playlists: list });\n        } else {\n            this.setState(prevState => ({ playlists: [...prevState.playlists, ...list] }));\n        }\n\n        if (data.nextPageToken) {\n            this.retrieve(data.nextPageToken);\n        }\n\n    };\n\n    retrieve = nextPageToken => {\n        console.log('Playlists.retrieve', nextPageToken);\n        executeRequest(buildPlaylistsRequest(nextPageToken),\n            data => this.store(data, nextPageToken));\n    };\n\n    updateFilter = event => {\n        console.log('Playlists.updateFilter');\n        if (event.keyCode === 27) {\n            this.setState({ filter: '' });\n        } else {\n            this.setState({ filter: event.target.value });\n        }\n    };\n\n    refresh = () => {\n        this.retrieve();\n    };\n\n    componentDidMount() {\n        console.log('Playlists.componentDidMount');\n        this.retrieve();\n    }\n\n    /*\n{\n   \"kind\":\"youtube#playlist\",\n   \"etag\":\"\\\"DuHzAJ-eQIiCIp7p4ldoVcVAOeY/0v8-koTMYYwrjjH091gV-uVnD7w\\\"\",\n   \"id\":\"PL_x8MpUypxebPqAdp-FT7MeViRdJyVlwR\",\n   \"snippet\":{\n      \"publishedAt\":\"2015-10-04T21:36:35.000Z\",\n      \"channelId\":\"UCE0q36_agQAeb4G3PXivkew\",\n      \"title\":\"trailers\",\n      \"description\":\"\",\n      \"thumbnails\":{\n         \"default\":{\n            \"url\":\"https://i.ytimg.com/vi/z5gxjvYDPJQ/default.jpg\",\n            \"width\":120,\n            \"height\":90\n         },\n         \"medium\":{\n            \"url\":\"https://i.ytimg.com/vi/z5gxjvYDPJQ/mqdefault.jpg\",\n            \"width\":320,\n            \"height\":180\n         },\n         \"high\":{\n            \"url\":\"https://i.ytimg.com/vi/z5gxjvYDPJQ/hqdefault.jpg\",\n            \"width\":480,\n            \"height\":360\n         }\n      },\n      \"channelTitle\":\"François Georgy\",\n      \"localized\":{\n         \"title\":\"trailers\",\n         \"description\":\"\"\n      }\n   },\n   \"contentDetails\":{\n      \"itemCount\":3\n   }\n}\n    */\n\n    render() {\n        const { isAuthorized, playlists, newPlaylist, filter } = this.state;\n\n        console.log('Playlists render');\n\n        if (!isAuthorized) {\n            return <div />;\n        } else {\n            if (playlists) {\n                return (\n                    <div>\n                        <h2>list of playlists</h2>\n                        <button onClick={this.refresh}>refresh</button>\n                        <h3>{playlists.length} playlists</h3>\n                        <div>\n                            new playlist:{' '}\n                            <input\n                                type=\"text\"\n                                value={newPlaylist}\n                                onChange={this.newPlaylistName}\n                            />{' '}\n                            <button onClick={this.createPlaylist}>\n                                create\n                            </button>\n                        </div>\n                        <div className=\"filter\">\n                            filter:{' '}\n                            <input type=\"text\" onKeyUp={this.updateFilter} />\n                        </div>\n                        <div>\n                            {playlists\n                                .filter(\n                                    p =>\n                                        p.snippet.title\n                                            .toLowerCase()\n                                            .indexOf(filter.toLowerCase()) > -1\n                                )\n                                .map((playlist, index) => {\n                                    // console.log(JSON.stringify(playlist));\n                                    return (\n                                        <div key={index}>\n                                            <Link to={`/videos/${playlist.id}`}>\n                                                {playlist.snippet.title} (\n                                                {\n                                                    playlist.contentDetails\n                                                        .itemCount\n                                                }{' '}\n                                                videos)\n                                            </Link>\n                                        </div>\n                                    );\n                                    // return <div key={index}><a href={`#${playlist.id}`}>{playlist.snippet.title}</a> ({playlist.contentDetails.itemCount} videos)</div>\n                                })}\n                        </div>\n                    </div>\n                );\n            } else {\n                return <div>Retrieving the playlists...</div>;\n            }\n        }\n    }\n}\n\nexport default Playlists;\n","import React, { Component } from 'react';\nimport {\n    buildApiRequest,\n    buildPlaylistsRequest,\n    buildPlaylistItemsRequest,\n    executeRequest,\n    buildPlaylistNameRequest,\n    moveIntoPlaylist,\n    moveMultipleIntoPlaylist,\n} from '../utils/gapi';\nimport './Videos.css';\nimport {snippetTitleSort} from \"../utils/sorting\";\n\n/**\n * Display the list of videos for a playlist.\n */\nclass Videos extends Component {\n\n    constructor(props) {\n        super(props);\n        // console.log(\"Videos.constructor\", props);\n        this.state = {\n            isAuthorized: false,\n            playlistName: null,\n            playlistId: props.match.params.playlistid,\n            videos: null,\n            playlists: null,\n            moveToPlaylistId: null,\n            filter: '',\n            videosLoading: false,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        // console.log(\"Videos.getDerivedStateFromProps\", props);\n        if (props.isAuthorized !== state.isAuthorized) {\n            return {\n                isAuthorized: props.isAuthorized,\n            };\n        }\n        // No state update necessary\n        return null;\n    }\n\n    componentDidMount() {\n        // console.log('Videos.componentDidMount');\n        this.refresh();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // console.log(`Videos.componentDidUpdate, playlistId=${this.state.playlistId}, prev=${prevState.playlistId}`, this.state);\n\n        if (!this.state.isAuthorized) return;\n\n        // At this point, we're in the \"commit\" phase, so it's safe to load the new data.\n        // if (this.state.isAuthorized && this.state.playlistId && ((this.state.videos === null) || (this.state.videos.length === 0))) {\n\n        if (this.state.playlistName === null) {\n            // !!! only retrieve data if state.playlistName is empty; otherwise this will generate an endless loop.\n            console.log('Videos.componentDidUpdate: call retrievePlaylistName');\n            this.retrievePlaylistName();\n        }\n\n        if (\n            !this.state.videosLoading &&\n            this.state.playlistId &&\n            this.state.videos === null\n        ) {\n            // !!! only retrieve data if state.videos is empty; otherwise this will generate an endless loop.\n            console.log('Videos.componentDidUpdate: call retrieveVideos');\n            this.retrieveVideos();\n        }\n\n        if (this.state.playlists === null) {\n            // !!! only retrieve data if state.playlists is empty; otherwise this will generate an endless loop.\n            console.log('Videos.componentDidUpdate: call retrievePlaylists');\n            this.retrievePlaylists();\n        }\n    }\n\n    storePlaylists = data => {\n        // console.log(\"Videos.storePlayLists\", data.items);\n        if (!data) return;\n        let list = data.items;\n        list.sort(snippetTitleSort);\n        this.setState({ playlists: list });\n    };\n\n    storeVideos = (data, currentToken) => {\n        // console.log('Videos.storeVideos', currentToken);\n\n        if (!data) return;\n\n        // console.log(\"Videos.storeVideos\", data);\n\n        let list = data.items;\n        list.sort(snippetTitleSort);\n\n        if (currentToken === undefined || !currentToken) {\n            this.setState({ videos: list });\n        } else {\n            this.setState(prevState => ({ videos: [...prevState.videos, ...list] }));\n        }\n\n        if (data.nextPageToken) {\n            this.retrieveVideos(data.nextPageToken);\n        }\n    };\n\n    updatePlaylistName = playlistName => {\n        this.setState({ playlistName });\n    };\n\n    retrievePlaylistName = () => {\n        if (!this.state.playlistId) {\n            console.warn('state.playlistId is empty');\n            return;\n        }\n\n        let req = buildPlaylistNameRequest(this.state.playlistId);\n\n        if (!req) {\n            console.warn('req is null');\n            return;\n        }\n\n        req.then(\n            function(response) {\n                try {\n                    this.updatePlaylistName(\n                        response.result.items[0].snippet.title\n                    );\n                } catch (e) {\n                    if (e instanceof TypeError) {\n                        console.log('buildPlaylistNameRequest incomplete response', e);\n                    } else {\n                        console.error('buildPlaylistNameRequest unexpected error', e);\n                    }\n                }\n            },\n            function() {\n                // onRejected handler\n                console.warn('buildPlaylistNameRequest rejected');\n            },\n            this\n        );\n    };\n\n    retrieveVideos = nextPageToken => {\n        // console.log(`Videos.retrieveVideos, playlistId=${this.state.playlistId}, pageToken=${nextPageToken}`);\n        // console.log(`Videos.retrieveVideos set videosLoading=true`);\n        this.setState({ videosLoading: true });\n        executeRequest(\n            buildPlaylistItemsRequest(this.state.playlistId, nextPageToken),\n            data => this.storeVideos(data, nextPageToken)\n        );\n    };\n\n    retrievePlaylists = () => {\n        // console.log(\"Videos.retrievePlayLists\");\n        executeRequest(buildPlaylistsRequest(), this.storePlaylists);\n    };\n\n    removeFromPlaylistState = videoItemId => {\n        // console.log(\"Videos.removeFromPlaylistState\", videoItemId);\n        let videos = this.state.videos;\n        let i = videos.findIndex(function f(e) {\n            return e.id === videoItemId;\n        });\n        // console.log(\"Videos.removeSuccess: video to delete: \", i, videos[i]);\n        videos.splice(i, 1);\n        this.setState({ videos });\n    };\n\n    removeError = error => {\n        console.log('Videos.removeError', error.code, error.message);\n    };\n\n    /**\n     * Remove a video from the current playlist\n     * @param videoItemId ID of the video-item in the current playlist\n     */\n    remove = videoItemId => {\n        // console.log('Videos.remove', videoItemId);\n        if (!videoItemId) return;\n        let request = buildApiRequest('DELETE', '/youtube/v3/playlistItems', {\n            id: videoItemId,\n        });\n        executeRequest(\n            request,\n            () => this.removeFromPlaylistState(videoItemId),\n            this.removeError\n        );\n    };\n\n    createError = error => {\n        console.log('Videos.insertError', error);\n    };\n\n    insertError = error => {\n        console.log('Videos.insertError', error);\n    };\n\n    /**\n     * Move the video to another playlist. The video will be removed from the current playlist.\n     * @param videoItemId ID of the video-item in the current playlist\n     * @param videoId ID of the video\n     */\n    move = (videoItemId, videoId, moveToPlaylistId) => {\n        // console.log('Videos.move', videoItemId, videoId, moveToPlaylistId);\n\n        if (!moveToPlaylistId) return;\n\n        let insertRequest = buildApiRequest(\n            'POST',\n            '/youtube/v3/playlistItems',\n            {\n                part: 'snippet', //,\n                // 'onBehalfOfContentOwner': ''\n            },\n            {\n                'snippet.playlistId': moveToPlaylistId,\n                'snippet.resourceId.kind': 'youtube#video',\n                'snippet.resourceId.videoId': videoId, //,\n                // 'snippet.position': ''\n            }\n        );\n\n        let deleteRequest = buildApiRequest(\n            'DELETE',\n            '/youtube/v3/playlistItems',\n            {\n                id: videoItemId,\n            }\n        );\n\n        //executeRequest(request, () => { this.insertSuccess(videoItemId) }, this.insertError);\n        // executeRequest(request, () => { this.remove(videoItemId) }, this.insertError);\n\n        // https://developers.google.com/api-client-library/javascript/reference/referencedocs#gapiclientbatch\n        // https://developers.google.com/api-client-library/javascript/features/promises\n        // gapi.client.Request.then(onFulfilled, onRejected, context)\n\n        // response:\n        //     An object containing information about the HTTP response.\n        //     Name\t        Type\t            Description\n        //     result\t    *\t                The JSON-parsed result. false if not JSON-parseable.\n        //     body\t        string\t            The raw response string.\n        //     headers\t    object | undefined\tThe map of HTTP response headers.\n        //     status\t    number | undefined\tHTTP status.\n        //     statusText\tstring | undefined\tHTTP status text.\n\n        /*\n        insertRequest\n            .then(function(response) {    // onFulfilled handler:\n                console.log(\"insertRequest promise onFulfilled handler\", response);\n                return deleteRequest\n                //},\n                // // onRejected handler:\n                // function () {\n                //     console.log(\"insertRequest onRejected handler\");\n                // },\n                // // context:\n                // this\n            }\n            // , function(reason) {\n            //     console.log(\"insertRequest promise onRejected handler\", reason);\n            // }\n            )\n            .catch(function(error) {\n                console.log(\"insert failed\", error);\n                throw error;    // let the error flow through the full chain.\n            })\n            .then(function(response) {\n                console.log(\"deleteRequest promise onFulfilled handler\", response);\n            }, function(reason) {\n                console.log(\"deleteRequest promise onRejected handler\", reason);\n            })\n            .catch(function(error) {\n                console.log(\"delete failed\", error);\n            });\n*/\n        let r = null;\n\n        // console.log('calling insertRequest');\n        insertRequest\n            .then(function() {\n                // console.log('calling deleteRequest');\n                return deleteRequest.then(function() {\n                    // console.log('deleteRequest.then');\n                    r = 'OK';\n                });\n            })\n            .catch(function(reason) {\n                // console.log('move failed', JSON.stringify(reason));\n                r = reason.result\n                    ? reason.result.error.message\n                    : 'unknow reason';\n            });\n\n        return r;\n\n        // {\n        //  \"result\":{\n        //      \"error\":{\n        //          \"errors\":[\n        //              {\"domain\":\"youtube.playlistItem\",\"reason\":\"playlistIdRequired\",\n        //              \"message\":\"Playlist id not specified.\"}],\n        //          \"code\":400,\n        //          \"message\":\"Playlist id not specified.\"}},\n        //          \"body\":\"{\\n \\\"error\\\": {\\n  \\\"errors\\\": [\\n   {\\n    \\\"domain\\\": \\\"youtube.playlistItem\\\",\\n    \\\"reason\\\": \\\"playlistIdRequired\\\",\\n    \\\"message\\\": \\\"Playlist id not specified.\\\"\\n   }\\n  ],\\n  \\\"code\\\": 400,\\n  \\\"message\\\": \\\"Playlist id not specified.\\\"\\n }\\n}\\n\",\n        //          \"headers\":{\"date\":\"Thu, 17 Jan 2019 13:26:34 GMT\",\"content-encoding\":\"gzip\",\"server\":\"GSE\",\"content-type\":\"application/json; charset=UTF-8\",\"vary\":\"Origin, X-Origin\",\"cache-control\":\"private, max-age=0\",\"content-length\":\"150\",\"expires\":\"Thu, 17 Jan 2019 13:26:34 GMT\"},\n        //          \"status\":400,\n        //          \"statusText\":null}\n    };\n\n    movep = (videoItemId, videoId, moveToPlaylistId) => {\n        // console.log('movep', videoItemId, videoId, moveToPlaylistId);\n        // insertInPlaylist(videoId, moveToPlaylistId)\n        //     .then(function(response) {\n        //         console.log(\"movep.insertInPlaylist resovled\", response);\n        //     })\n        //     .catch(function(error) {\n        //         console.log(\"movep.insertInPlaylist rejected\");\n        //     });\n\n        // let r = moveIntoPlaylist(videoItemId, videoId, moveToPlaylistId);\n        // console.log(\"movep, r\", r);\n\n/*\n        moveIntoPlaylist(videoItemId, videoId, moveToPlaylistId)\n            .then(function(response) {\n                console.log('movep.moveIntoPlaylist resolved', response);\n            })\n            .catch(function(reason) {\n                console.log(\n                    'movep.moveIntoPlaylist rejected',\n                    reason,\n                    reason.result.error.message\n                );\n            });\n*/\n    };\n\n    moveSuccess = ({ operation, data, videoId, videoItemId }) => {\n        console.log('moveSuccess', operation, videoId, videoItemId, data);\n\n        switch (operation) {\n            case 'insert':\n                // console.log(\"insert video \", videoId, data.result.snippet.resourceId.videoId);\n                break;\n            case 'delete':\n                // console.log(\"delete video \", videoItemId);\n                this.removeFromPlaylistState(videoItemId);\n                break;\n            default:\n                console.error(`moveSuccess: unknown operation ${operation}`);\n        }\n\n        // result:\n        //     etag: \"\"XpPGQXPnxQJhLgs6enD_n8JR4Qk/-SMkaVE1qGHUDguCww7-fwlg5AY\"\"\n        // id: \"UExfeDhNcFV5cHhlYksyX0NwSmItT3ROZVVfNTY4eWZCMi41MzJCQjBCNDIyRkJDN0VD\"\n        // kind: \"youtube#playlistItem\"\n        // snippet:\n        //     channelId: \"UCE0q36_agQAeb4G3PXivkew\"\n        // channelTitle: \"François Georgy\"\n        // description: \"Now playing in select cities: gracejonesmovie.com↵↵This electrifying journey through the public and private worlds of pop culture mega-icon Grace Jones contrasts musical sequences with intimate personal footage, all the while brimming with Jones’s bold aesthetic. A larger-than-life entertainer, an androgynous glam-pop diva, an unpredictable media presence – Grace Jones is all these things and more. Sophie Fiennes’s documentary goes beyond the traditional music biography, offering a portrait as stylish and unconventional as its subject. Taking us home with her to Jamaica, into the studio with long-time collaborators Sly & Robbie, and backstage at gigs around the world, the film reveals Jones as lover, daughter, mother, and businesswoman. But the stage is the fixed point to which the film returns, with eye-popping performances of \"Slave to the Rhythm,\" “Pull Up to the Bumper,” \"Love is the Drug,\" and more. Jones herself has said watching the film “will be like seeing me almost naked” and, indeed, Fiennes’s treatment is every bit as definition-defying as its subject, untamed by either age or life itself.\"\n        // playlistId: \"PL_x8MpUypxebK2_CpJb-OtNeU_568yfB2\"\n        // publishedAt: \"2019-01-18T12:35:59.000Z\"\n        // resourceId: {kind: \"youtube#video\", videoId: \"ya7yeAXU_Cw\"}\n        // thumbnails: {default: {…}, medium: {…}, high: {…}, standard: {…}, maxres: {…}}\n        // title: \"Grace Jones: Bloodlight and Bami – Official U.S. Trailer\"\n        // __proto__: Object\n        // __proto__: Object\n        // status: 200\n        // statusText: null\n    };\n\n    moveFailure = r => {\n        console.log('moveFailure', r);\n    };\n\n    moveVisible = () => {\n        console.log('Videos.moveVisible');\n\n        let videoItemIds = [];\n        let videoIds = [];\n\n        this.state.videos\n            .filter(\n                video =>\n                    video.snippet.title\n                        .toLowerCase()\n                        .indexOf(this.state.filter.toLowerCase()) > -1\n            )\n            .map(video => {\n                videoItemIds.push(video.id);\n                if (!videoIds.includes(video.contentDetails.videoId))\n                    videoIds.push(video.contentDetails.videoId); // avoid pushing duplicates\n            });\n\n        console.log('moveVisible', videoIds, videoItemIds);\n\n        console.log('moveMultipleIntoPlaylist before');\n        // moveMultipleIntoPlaylist(videoItemIds, videoIds, this.state.moveToPlaylistId).then(this.moveSuccess, this.moveFailure);\n        moveMultipleIntoPlaylist(\n            videoItemIds,\n            videoIds,\n            this.state.moveToPlaylistId,\n            this.moveSuccess,\n            this.moveFailure\n        );\n        console.log('moveMultipleIntoPlaylist after');\n    };\n\n    setMoveToList = event => {\n        // console.log(\"Videos.setMoveToList\", event.target.value);\n        this.setState({ moveToPlaylistId: event.target.value });\n    };\n\n    updateFilter = event => {\n        // console.log(\"Videos.updateFilter\", event.target.value);\n        let f = event.target.value;\n        this.setState({ filter: f });\n    };\n\n    refresh = (clearFilter = false) => {\n        console.log('refresh');\n\n        if (!this.state.isAuthorized) return;\n\n        this.setState({\n            playlistName: null,\n            videos: null,\n            playlists: null,\n            videosLoading: false,\n            filter: clearFilter ? '' : this.state.filter,\n        });\n\n        this.retrievePlaylistName();\n        this.retrieveVideos();\n        this.retrievePlaylists();\n    };\n\n    render() {\n        const {\n            isAuthorized,\n            playlistId,\n            playlistName,\n            videos,\n            playlists,\n            moveToPlaylistId,\n            filter,\n        } = this.state;\n\n        // console.log(\"Videos.render\", videos);\n\n        if (!isAuthorized) {\n            return <div />;\n        } else {\n            if (videos) {\n                let visibleVideos = videos.filter(\n                    video =>\n                        video.snippet.title\n                            .toLowerCase()\n                            .indexOf(filter.toLowerCase()) > -1\n                );\n                visibleVideos.sort((a, b) => {\n                    if (a.snippet.title < b.snippet.title) {\n                        return -1;\n                    }\n                    if (a.snippet.title > b.snippet.title) {\n                        return 1;\n                    }\n                    // names must be equal\n                    return 0;\n                });\n\n                return (\n                    <div className=\"videos\">\n                        <h2>Videos in {playlistName} :</h2>\n                        <h3>{videos.length} videos</h3>\n                        <button onClick={this.refresh}>refresh</button>\n                        <div className=\"playlist-selector\">\n                            target playlist:\n                            {playlists && (\n                                <select onChange={this.setMoveToList}>\n                                    <option value=\"\">\n                                        select list to move to\n                                    </option>\n                                    {playlists.map((p, i) => {\n                                        return p.id === playlistId ? null : (\n                                            <option key={i} value={p.id}>\n                                                {p.snippet.title}\n                                            </option>\n                                        );\n                                    })}\n                                </select>\n                            )}\n                        </div>\n                        {moveToPlaylistId && (\n                            <div>\n                                <button onClick={this.moveVisible}>\n                                    move visible to target playlist\n                                </button>\n                            </div>\n                        )}\n                        <div className=\"filter\">\n                            filter:{' '}\n                            <input\n                                type=\"text\"\n                                defaultValue={filter}\n                                onKeyUp={this.updateFilter}\n                            />\n                        </div>\n                        <div>\n                            {// videos.filter((video) => video.snippet.title.toLowerCase().indexOf(filter.toLowerCase()) > -1).map((video, index) => {\n                            visibleVideos.map((video, index) => {\n                                return (\n                                    <div key={index}>\n                                        <a href={`https://www.youtube.com/watch?v=${video.contentDetails.videoId}`} target=\"_blank\" rel=\"noopener noreferrer\">{video.snippet.title}</a>\n                                        {' '}\n                                        <button onClick={() => this.remove(video.id)}>remove</button>\n                                        {moveToPlaylistId && (\n                                            <button onClick={() => this.movep(video.id, video.contentDetails.videoId, moveToPlaylistId)}>move</button>\n                                        )}\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </div>\n                );\n            } else {\n                return <div>Retrieving the list of videos...</div>;\n            }\n        }\n    }\n\n    /*\n{\n  \"kind\": \"youtube#playlistItem\",\n  \"etag\": \"\\\"DuHzAJ-eQIiCIp7p4ldoVcVAOeY/1tCBTp6eGaB5-FomghShvhm_Vkc\\\"\",\n  \"id\": \"UExfeDhNcFV5cHhlYlBlX1hZeWpKTUo1WVdlOTcyaU9Uci4yODlGNEE0NkRGMEEzMEQy\",\n  \"snippet\": {\n    \"publishedAt\": \"2018-06-19T10:55:25.000Z\",\n    \"channelId\": \"UCE0q36_agQAeb4G3PXivkew\",\n    \"title\": \"Urfaust - The Constellatory Practice (Full Album)\",\n    \"description\": \"Country: The Netherlands | Year: 2018 | Genre: Atmospheric Doom/Black Metal\\n\\nLP & CD available here:\\nhttp://www.van-records.de\\n\\nDigital Album available here:\\nhttps://urfaust.bandcamp.com/album/the-constellatory-practice-2\\n\\n- Urfaust -\\nWebshop: http://www.urfaust.bigcartel.com\\nFacebook: https://www.facebook.com/urfaustofficial\\nBandcamp: http://urfaust.bandcamp.com\\nMetal Archives: http://www.metal-archives.com/bands/Urfaust/19596\\n\\n- Ván Records -\\nWebsite: http://www.van-records.de\\nFacebook: https://www.facebook.com/vanrecs\\nBandcamp: http://vanrecords.bandcamp.com\\nYouTube: https://www.youtube.com/vanrecords\\nSoundcloud: https://soundcloud.com/v-n-records\\n\\nTracklist: \\n1. Doctrine Of Spirit Obsession 00:00\\n2. Behind The Veil Of The Trance Sleep 13:18\\n3. A Course In Cosmic Meditation 21:06\\n4. False Sensorial Impressions 25:40\\n5. Trail Of The Conscience Of The Dead 31:42\\n6. Eradication Through Hypnotic Suggestion 44:27\\n\\nThis video is for promotional use only!\",\n    \"thumbnails\": {\n      \"default\": {\n        \"url\": \"https://i.ytimg.com/vi/ayCHct5hXPc/default.jpg\",\n        \"width\": 120,\n        \"height\": 90\n      },\n      \"medium\": {\n        \"url\": \"https://i.ytimg.com/vi/ayCHct5hXPc/mqdefault.jpg\",\n        \"width\": 320,\n        \"height\": 180\n      },\n      \"high\": {\n        \"url\": \"https://i.ytimg.com/vi/ayCHct5hXPc/hqdefault.jpg\",\n        \"width\": 480,\n        \"height\": 360\n      },\n      \"standard\": {\n        \"url\": \"https://i.ytimg.com/vi/ayCHct5hXPc/sddefault.jpg\",\n        \"width\": 640,\n        \"height\": 480\n      },\n      \"maxres\": {\n        \"url\": \"https://i.ytimg.com/vi/ayCHct5hXPc/maxresdefault.jpg\",\n        \"width\": 1280,\n        \"height\": 720\n      }\n    },\n    \"channelTitle\": \"François Georgy\",\n    \"playlistId\": \"PL_x8MpUypxebPe_XYyjJMJ5YWe972iOTr\",\n    \"position\": 1,\n    \"resourceId\": {\n      \"kind\": \"youtube#video\",\n      \"videoId\": \"ayCHct5hXPc\"\n    }\n  },\n  \"contentDetails\": {\n    \"videoId\": \"ayCHct5hXPc\",\n    \"videoPublishedAt\": \"2018-05-04T10:59:02.000Z\"\n  }\n}\n    */\n}\n\nexport default Videos;\n","import React, { Component } from 'react';\nimport { buildChannelsRequest, executeRequest } from '../utils/gapi';\nimport { Link } from 'react-router-dom';\nimport './Channels.css';\n\n/**\n * Display the list of channels of the authorized user.\n */\nclass Channels extends Component {\n    constructor(props) {\n        super(props);\n        console.log('Channels.constructor', props);\n        this.state = {\n            isAuthorized: false,\n            channels: null,\n            filter: '',\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        console.log('Channels.getDerivedStateFromProps', props);\n        if (props.isAuthorized !== state.isAuthorized) {\n            return {\n                isAuthorized: props.isAuthorized,\n            };\n        }\n\n        // No state update necessary\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        console.log('Channels.componentDidUpdate');\n        // At this point, we're in the \"commit\" phase, so it's safe to load the new data.\n        if (this.state.isAuthorized && this.state.channels === null) {\n            // !!! only retrieve data if state.channels is empty; otherwise this will generate an endless loop.\n            this.retrieve();\n        }\n    }\n\n    store = data => {\n        console.log('Channels.store');\n        if (!data) return;\n        this.setState({\n            channels: data.items[0].contentDetails.relatedPlaylists,\n        });\n    };\n\n    retrieve = nextPageToken => {\n        console.log('Channels.retrieve', nextPageToken);\n        executeRequest(buildChannelsRequest(), this.store);\n    };\n\n    updateFilter = event => {\n        console.log('Channels.updateFilter');\n        if (event.keyCode === 27) {\n            this.setState({ filter: '' });\n        } else {\n            this.setState({ filter: event.target.value });\n        }\n    };\n\n    componentDidMount() {\n        console.log('Channels.componentDidMount');\n        this.retrieve();\n    }\n\n    render() {\n        const { isAuthorized, channels, filter } = this.state;\n\n        console.log('Channels render', channels);\n\n        if (!isAuthorized) {\n            return <div />;\n        } else {\n            if (channels) {\n                return (\n                    <div>\n                        <h2>list of channels</h2>\n                        {/*<div className=\"filter\">*/}\n                        {/*filter: <input type=\"text\" onKeyUp={this.updateFilter} />*/}\n                        {/*</div>*/}\n                        <div>\n                            {Object.keys(channels).map((name, index) => {\n                                return (\n                                    <div key={index}>\n                                        <Link to={`/videos/${channels[name]}`}>\n                                            {name}\n                                        </Link>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </div>\n                );\n            } else {\n                return <div>Retrieving the channels...</div>;\n            }\n        }\n    }\n}\n\nexport default Channels;\n","import React, {Component, Fragment} from 'react';\nimport {\n    buildPlaylistsRequest,\n    buildPlaylistItemsRequest,\n    executeRequest,\n    moveMultipleIntoPlaylist,\n    copyMultipleIntoPlaylist, removeMultipleFromPlaylist,\n} from '../utils/gapi';\nimport './Videos.css';\nimport {produce} from \"immer\";\nimport {\n    contentDetailsPublishedAtSort, contentDetailsPublishedAtSortReverse,\n    snippetPositionSort, snippetPositionSortReverse,\n    snippetPublishedAtSort, snippetPublishedAtSortReverse,\n    snippetTitleSort, snippetTitleSortReverse\n} from \"../utils/sorting\";\n\nconst SORT_BY_SNIPPET_TITLE = \"snippetTitle\";\nconst SORT_BY_SNIPPET_PUBLISHED_AT = \"snippetPublishedAt\";\nconst SORT_BY_SNIPPET_POSITION = \"snippetPosition\";\nconst SORT_BY_VIDEO_PUBLISHED_AT = \"videoPublishedAt\";\nconst SORT_ASCENDING = true;    // false means sort descending\n\n\nclass TwinVideos extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isAuthorized: false,\n            videosLoading: false,\n            playlists: null,\n            sync: false,\n            lists: [{\n                playlistId: null,\n                videos: [],\n                filter: '',\n                sortMethod: SORT_BY_SNIPPET_TITLE,\n                sortDirection: SORT_ASCENDING,\n                errorMessage: null,\n                progressMessage: null,\n                marked: []      // list of VideoId (ID within the playlist)\n            },{\n                playlistId: null,\n                videos: [],\n                filter: '',\n                sortMethod: SORT_BY_SNIPPET_TITLE,\n                sortDirection: SORT_ASCENDING,\n                errorMessage: null,\n                progressMessage: null,\n                marked: []      // list of VideoId (ID within the playlist)\n            }]\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        // console.log(\"TwinVideos.getDerivedStateFromProps\", props);\n        if (props.isAuthorized !== state.isAuthorized) {\n            return {\n                isAuthorized: props.isAuthorized,\n            };\n        }\n        // No state update necessary\n        return null;\n    }\n\n    componentDidMount() {\n        // console.log('TwinVideos.componentDidMount');\n        this.refresh();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        // At this point, we're in the \"commit\" phase, so it's safe to load the new data.\n\n        // console.log(`TwinVideos.componentDidUpdate, playlistId=${this.state.playlistId}, prev=${prevState.playlistId}`, this.state);\n\n        if (!this.state.isAuthorized) return;\n\n/*\n        if (\n            !this.state.videosLoading &&\n            this.state.playlistId &&\n            this.state.videos === null\n        ) {\n            // !!! only retrieve data if state.videos is empty; otherwise this will generate an endless loop.\n            console.log('TwinVideos.componentDidUpdate: call retrieveVideos');\n            this.retrieveVideos();\n        }\n*/\n\n        if (this.state.playlists === null) {\n            // !!! only retrieve data if state.playlists is empty; otherwise this will generate an endless loop.\n            // console.log('TwinVideos.componentDidUpdate: call retrievePlaylists');\n            this.retrievePlaylists();\n        }\n    }\n\n    setSortMethod = (listIndex, method) => {\n        // if same method, then flip the direction\n        this.setState(\n            produce(draft => {\n                if (draft.lists[listIndex].sortMethod === method) {\n                    draft.lists[listIndex].sortDirection = !draft.lists[listIndex].sortDirection;\n                } else {\n                    draft.lists[listIndex].sortMethod = method;\n                }\n            })\n        );\n    };\n\n    getSortFunction = (listIndex) => {\n        let asc = this.state.lists[listIndex].sortDirection;\n        switch(this.state.lists[listIndex].sortMethod) {\n            case SORT_BY_SNIPPET_TITLE : return asc ? snippetTitleSort : snippetTitleSortReverse;\n            case SORT_BY_SNIPPET_PUBLISHED_AT : return asc ? snippetPublishedAtSort : snippetPublishedAtSortReverse;\n            case SORT_BY_SNIPPET_POSITION : return asc ? snippetPositionSort : snippetPositionSortReverse;\n            case SORT_BY_VIDEO_PUBLISHED_AT : return asc ? contentDetailsPublishedAtSort : contentDetailsPublishedAtSortReverse;\n            default : return snippetTitleSort;\n        }\n    };\n\n    storePlaylists = data => {\n\n        // console.log(\"TwinVideos.storePlayLists\", data.items);\n\n        if (!data) return;\n\n        let list = data.items;\n        list.sort(snippetTitleSort);\n        this.setState({ playlists: list });\n    };\n\n    storeVideos = (listIndex, data, currentToken) => {\n\n        // console.log('TwinVideos.storeVideos', currentToken);\n\n        if (!data) return;\n\n        let list = data.items;\n        list.sort(snippetTitleSort);\n\n        this.setState(\n            produce(draft => {\n                if (currentToken === undefined || !currentToken) {\n                    draft.lists[listIndex].videos = list;\n                } else {\n                    draft.lists[listIndex].videos = [...draft.lists[listIndex].videos, ...list]\n                }\n            })\n        );\n\n        if (data.nextPageToken) {\n            // console.log('TwinVideos.storeVideos: get next page with token ' + data.nextPageToken);\n            this.retrieveVideos(listIndex, data.nextPageToken);\n        }\n    };\n\n    retrieveVideos = (listIndex, nextPageToken) => {\n        // console.log(`TwinVideos.retrieveVideos, playlistId=${this.state.playlistId}, pageToken=${nextPageToken}`);\n        // console.log(`TwinVideos.retrieveVideos set videosLoading=true`);\n        this.setState({ errorMessage: null, videosLoading: true });\n        executeRequest(\n            buildPlaylistItemsRequest(this.state.lists[listIndex].playlistId, nextPageToken),\n            data => this.storeVideos(listIndex, data, nextPageToken)\n        );\n    };\n\n    retrievePlaylists = () => {\n        // console.log(\"TwinVideos.retrievePlayLists\");\n        executeRequest(buildPlaylistsRequest(), this.storePlaylists);\n    };\n\n    refreshPlaylists = () => {\n        this.retrievePlaylists();\n    };\n\n    refreshPlaylist = (listIndex) => {\n        // console.log(`refreshPlaylist(${listIndex})`);\n        this.setState(\n            produce(draft => {\n                draft.lists[listIndex].errorMessage = null;\n                draft.lists[listIndex].videos = [];\n            }),\n            () => this.retrieveVideos(listIndex)\n        );\n    };\n\n    setPlaylist = (event, listIndex) => {\n        // console.log(\"TwinVideos.setMoveToList\", event.target.value, listIndex, this.state);\n        let id = event.target.value;\n        this.setState(\n            produce(draft => {\n                draft.lists[listIndex].errorMessage = null;\n                // console.log(\"draft\", draft.lists);\n                // console.log(\"target\", event.target);\n                draft.lists[listIndex].playlistId = id;\n            }),\n            () => this.retrieveVideos(listIndex)\n        );\n    };\n\n    removeFromPlaylistState = (listIndex, playlistItemIds) => {\n        // console.log(\"TwinVideos.removeFromPlaylistState\", playlistItemId);\n        this.setState(\n            produce(draft => {\n                let videos = draft.lists[listIndex].videos;\n                for (let i=0; i<playlistItemIds.length; i++) {\n                    let k = videos.findIndex(video => video.id === playlistItemIds[i]);\n                    if (k >= 0) videos.splice(k, 1);\n                }\n                draft.lists[listIndex].videos = videos;\n                draft.lists[listIndex].errorMessage = null;\n            })  //,\n            //() => this.retrieveVideos(playlistIndex)\n        );\n    };\n\n    // insertSuccess = (listIndex, { operation, data, videoId, playlistItemId }) => {\n    //     console.log('moveSuccess', operation, videoId, playlistItemId, data);\n    //     this.refreshPlaylist(listIndex);\n    // };\n\n    // removeSuccess = (listIndex, { operation, data, videoId, playlistItemId }) => {\n    //     console.log('moveSuccess', operation, videoId, playlistItemId, data);\n    //     this.removeFromPlaylistState(listIndex, playlistItemId);\n    // };\n\n    getVisibleIds = listIndex => {\n\n        // console.log(`getVisibleIds(${listIndex})`, this.state);\n\n        let filter = this.state.lists[listIndex].filter.toLowerCase();\n\n        let playlistItemIds = [];\n        let videoIds = [];\n\n        this.state.lists[listIndex].videos\n            .filter(playlistItem => playlistItem.snippet.title.toLowerCase().indexOf(filter) > -1)\n            .forEach(playlistItem => {\n                playlistItemIds.push(playlistItem.id);\n                if (!videoIds.includes(playlistItem.contentDetails.videoId)) {\n                    videoIds.push(playlistItem.contentDetails.videoId); // avoid pushing duplicates\n                }\n            });\n\n        return {\n            playlistItemIds,\n            videoIds\n        }\n    };\n\n    mark = (listIndex, playlistItemIds) => {\n        this.setState(\n            produce(draft => {\n                draft.lists[listIndex].marked = Array.isArray(playlistItemIds) ? playlistItemIds : [playlistItemIds];   // IDs within the playlist\n            })\n        );\n    };\n\n    clearMarked = (listIndex) => {\n        this.setState(\n            produce(draft => {\n                draft.lists[listIndex].progressMessage = null;\n                draft.lists[listIndex].marked = [];\n            })\n        );\n    };\n\n    progress = (listIndex, {index, total, operation, videoId, playlistItemId}) => {\n        // console.log(\"progress\", videoId, playlistItemId, `${index}/${total}: ${operation} ${videoId}`);\n        this.setState(\n            produce(draft => {\n                draft.lists[listIndex].progressMessage = `${index}/${total}: ${operation} ${videoId}`;\n                let k = draft.lists[listIndex].marked.findIndex(id => id === playlistItemId);\n                // console.log(\"progress k\", k, videoId);\n                if (k >= 0) draft.lists[listIndex].marked.splice(k, 1);\n            })\n        );\n    };\n\n    failure = (listIndex, error) => {\n        this.setState(\n            produce(draft => {\n                draft.lists[listIndex].errorMessage = error.message;\n            })\n        );\n    };\n\n    copy = (sourceListIndex, targetListIndex, playlistItemId, videoId) => {\n        // console.log('copy', sourceListIndex, targetListIndex, playlistItemId, videoId);\n        this.mark(sourceListIndex, playlistItemId);\n        copyMultipleIntoPlaylist(\n            [playlistItemId],\n            [videoId],\n            this.state.lists[targetListIndex].playlistId,\n            (data) => this.progress(sourceListIndex, data),\n            () => {\n                this.retrievePlaylists();   // update the number of videos per playlist displayed in the dropdown select\n                this.refreshPlaylist(targetListIndex);\n            },\n            (data) => this.failure(sourceListIndex, data.error));\n    };\n\n    copyAll = (sourceListIndex, targetListIndex) => {\n        // console.log('move', sourceListIndex, targetListIndex, playlistItemId, videoId);\n        const { playlistItemIds, videoIds } = this.getVisibleIds(sourceListIndex);\n        this.mark(sourceListIndex, playlistItemIds);\n        copyMultipleIntoPlaylist(\n            playlistItemIds,\n            videoIds,\n            this.state.lists[targetListIndex].playlistId,\n            (data) => this.progress(sourceListIndex, data),\n            () => {\n                this.retrievePlaylists();   // update the number of videos per playlist displayed in the dropdown select\n                this.refreshPlaylist(targetListIndex);\n                this.clearMarked(sourceListIndex);\n            },\n            (data) => this.failure(sourceListIndex, data.error));\n    };\n\n    move = (sourceListIndex, targetListIndex, playlistItemId, videoId) => {\n        // console.log('move', sourceListIndex, targetListIndex, playlistItemId, videoId);\n        this.mark(sourceListIndex, playlistItemId);\n        moveMultipleIntoPlaylist(\n            [playlistItemId],\n            [videoId],\n            this.state.lists[targetListIndex].playlistId,\n            (data) => {\n                this.progress(sourceListIndex, data);\n                this.removeFromPlaylistState(sourceListIndex, [data.playlistItemId]);\n            },\n            () => {\n                this.retrievePlaylists();   // update the number of videos per playlist displayed in the dropdown select\n                this.refreshPlaylist(targetListIndex);\n                this.clearMarked(sourceListIndex);\n            },\n            (data) => this.failure(sourceListIndex, data.error));\n    };\n\n    moveAll = (sourceListIndex, targetListIndex) => {\n        // console.log('move', sourceListIndex, targetListIndex, playlistItemId, videoId);\n        const { playlistItemIds, videoIds } = this.getVisibleIds(sourceListIndex);\n        this.mark(sourceListIndex, playlistItemIds);\n        moveMultipleIntoPlaylist(\n            playlistItemIds,\n            videoIds,\n            this.state.lists[targetListIndex].playlistId,\n            (data) => {\n                this.progress(sourceListIndex, data);\n                this.removeFromPlaylistState(sourceListIndex, [data.playlistItemId]);\n            },\n            () => {\n                this.retrievePlaylists();   // update the number of videos per playlist displayed in the dropdown select\n                this.refreshPlaylist(targetListIndex);\n                this.clearMarked(sourceListIndex);\n            },\n            (data) => this.failure(sourceListIndex, data.error));\n    };\n\n    remove = (listIndex, playlistItemId, videoId) => {\n        // console.log('remove', listIndex, playlistItemId, videoId);\n        this.mark(listIndex, playlistItemId);\n        removeMultipleFromPlaylist(\n            [playlistItemId],\n            [videoId],\n            this.state.lists[listIndex].playlistId,\n            (data) => this.progress(listIndex, data),\n            () => {\n                this.removeFromPlaylistState(listIndex, [playlistItemId]);\n                this.clearMarked(listIndex);\n            },\n            (data) => this.failure(listIndex, data.error));\n\n    };\n\n    removeAll = (listIndex) => {\n        // console.log('remove');\n        const { playlistItemIds, videoIds } = this.getVisibleIds(listIndex);\n        this.mark(listIndex, playlistItemIds);\n        removeMultipleFromPlaylist(\n            playlistItemIds,\n            videoIds,\n            this.state.lists[listIndex].playlistId,\n            (data) => this.progress(listIndex, data),\n            () => {\n                this.removeFromPlaylistState(listIndex, playlistItemIds);\n                this.clearMarked(listIndex);\n            },\n            (data) => this.failure(listIndex, data.error));\n    };\n\n    updateFilter = (event, listIndex) => {\n        // console.log(\"TwinVideos.updateFilter\", event.target.value);\n        let f = event.target.value;\n        this.setState(\n            produce(draft => {\n                for (let i=0; i<draft.lists.length; i++) {\n                    if (draft.sync || i === listIndex) {\n                        draft.lists[i].errorMessage = null;\n                        draft.lists[i].filter = f;\n                    }\n                }\n            })\n        );\n    };\n\n    clearFilter = listIndex => {\n        this.setState(\n            produce(draft => {\n                draft.lists[listIndex].filter = '';\n            })\n        );\n    };\n\n    refresh = (listIndex, clearFilter = false) => {\n        // console.log('refresh');\n        if (!this.state.isAuthorized) return;\n        this.setState(\n            produce(draft => {\n                draft.videosLoading = false;\n                draft.playlists = null;\n                for (let i=0; i<draft.lists; i++) {\n                    draft.lists[i] = {\n                        playlistId: null,\n                        videos: [],\n                        filter: clearFilter ? '' : draft.lists[i].filter,\n                        errorMessage: null\n                    }\n                }\n            }),\n            () => this.retrievePlaylists()\n        );\n    };\n\n    dismissErrorMessage = (listIndex) => {\n        this.setState(produce(draft => {\n            draft.lists[listIndex].errorMessage = null;\n        }));\n    };\n\n    toggleSync = () => {\n        this.setState({sync: !this.state.sync});\n    };\n\n\n    render() {\n\n        const { isAuthorized, playlists, lists, sortDirection, sync } = this.state;\n\n        // console.log(\"render\", lists);\n\n        if (!isAuthorized) {\n            return <div />;\n        } else {\n            return (\n                <div className=\"lists\">\n                {\n                    lists.map((list, listIndex) => {\n                        // console.log(\"list.marked\", list.marked);\n                        let sortMethod = lists[listIndex].sortMethod;\n                        let filt = list.filter.toLowerCase();\n                        let visibleVideos = list.videos\n                            .filter(video => video.snippet.title.toLowerCase().indexOf(filt) > -1)\n                            .sort(this.getSortFunction(listIndex));\n                        return (\n                            <div className=\"videos\" key={listIndex}>\n                                {playlists &&\n                                <div className=\"playlist-selector\">\n                                    <select onChange={(event) => this.setPlaylist(event, listIndex)}>\n                                        <option defaultValue={list.playlistId}>select playlist...</option>\n                                        {playlists.map((p, i) => <option key={i} value={p.id}>{p.snippet.title}</option>)}\n                                    </select> <button onClick={this.refreshPlaylists}>refresh</button>\n                                    {' '}\n                                    {list.playlistId && <a href={`https://www.youtube.com/playlist?list=${list.playlistId}`} target=\"_blank\" rel=\"noopener noreferrer\">open in YouTube</a>}\n                                </div>\n                                }\n                                {list.errorMessage &&\n                                <div className=\"messages\">\n                                    <div className=\"error\">{list.errorMessage}<div className=\"dismiss\"><button onClick={() => this.dismissErrorMessage(listIndex)}>dismiss</button></div></div>\n                                </div>\n                                }\n                                {list.playlistId &&\n                                <div className=\"infos\">\n                                    There are {list.videos.length} videos in this playlist.\n                                    {list.videos.length > 0 && <button onClick={() => this.refreshPlaylist(listIndex)}>refresh the list of videos</button>}\n                                </div>\n                                }\n\n                                {list.progressMessage &&\n                                <div className=\"progress\">\n                                    {list.progressMessage}\n                                </div>\n                                }\n\n\n                                {list.videos && list.videos.length > 0 &&\n                                <Fragment>\n                                    {/*<button onClick={() => this.refresh(listIndex)}>refresh</button>*/}\n                                    <div className=\"filtering\">\n                                        {listIndex === 0 &&\n                                        <div className=\"sync\">\n                                            <button onClick={this.toggleSync}>sync filter&sorting: {sync ? \"ON\" : \"OFF\"}</button>\n                                        </div>\n                                        }\n                                        <div className=\"filter\">\n                                            Filter: <input type=\"text\" value={list.filter} onChange={(event) => this.updateFilter(event, listIndex)} />\n                                            <button onClick={() => this.clearFilter(listIndex)}>clear filter</button>\n                                            {visibleVideos.length} videos shown\n                                        </div>\n                                    </div>\n                                    {visibleVideos.length > 0 &&\n                                    <div>\n                                        {listIndex % 2\n                                            ? <div className=\"batch-actions\">\n                                                Apply to all videos shown below:\n                                                <button title=\"remove shown videos from the playlist\" onClick={() => this.removeAll(listIndex)}><i className=\"fas fa-trash-alt\"></i> remove all</button>\n                                                <button onClick={() => this.copyAll(listIndex, listIndex - 1)}><i className=\"fas fa-angle-double-left\"></i> copy all</button>\n                                                <button onClick={() => this.moveAll(listIndex, listIndex - 1)}><i className=\"fas fa-angle-left\"></i> move all</button>\n                                            </div>\n                                            : <div className=\"batch-actions\">\n                                                Apply to all videos shown below:\n                                                <button title=\"remove shown videos from the playlist\" onClick={() => this.removeAll(listIndex)}><i className=\"fas fa-trash-alt\"></i> remove all</button>\n                                                <button onClick={() => this.copyAll(listIndex, listIndex + 1)}>copy all <i className=\"fas fa-angle-double-right\"></i></button>\n                                                <button onClick={() => this.moveAll(listIndex, listIndex + 1)}>move all <i className=\"fas fa-angle-right\"></i></button>\n                                            </div>\n                                        }\n                                    </div>\n                                    }\n                                    {/* list.progressMessage &&\n                                    <div className=\"progress\">\n                                        {list.progressMessage}\n                                    </div>\n                                    */}\n                                    <div className=\"sorting\">\n                                        <button onClick={() => this.setSortMethod(listIndex, SORT_BY_SNIPPET_TITLE)} className={sortMethod === SORT_BY_SNIPPET_TITLE ? \"text-button active\" : \"text-button\"}>\n                                            title<i className={sortDirection ? \"fas fa-sort-alpha-down\" : \"fas fa-sort-alpha-up\"}></i>\n                                        </button>\n                                        <button onClick={() => this.setSortMethod(listIndex, SORT_BY_SNIPPET_PUBLISHED_AT)} className={sortMethod === SORT_BY_SNIPPET_PUBLISHED_AT ? \"text-button active\" : \"text-button\"}>\n                                            added to playlist<i className={sortDirection ? \"fas fa-sort-numeric-down\" : \"fas fa-sort-numeric-up\"}></i>\n                                        </button>\n                                        <button onClick={() => this.setSortMethod(listIndex, SORT_BY_VIDEO_PUBLISHED_AT)} className={sortMethod === SORT_BY_VIDEO_PUBLISHED_AT ? \"text-button active\" : \"text-button\"}>\n                                            video created<i className={sortDirection ? \"fas fa-sort-numeric-down\" : \"fas fa-sort-numeric-up\"}></i>\n                                        </button>\n                                        <button onClick={() => this.setSortMethod(listIndex, SORT_BY_SNIPPET_POSITION)} className={sortMethod === SORT_BY_SNIPPET_POSITION ? \"text-button active\" : \"text-button\"}>\n                                            position<i className={sortDirection ? \"fas fa-sort-numeric-down\" : \"fas fa-sort-numeric-up\"}></i>\n                                        </button>\n                                    </div>\n                                    <div className=\"rows\">\n                                    {\n                                        visibleVideos.map((video, index) => {\n                                            // console.log(\"video.id\", video.id);\n                                            let m = list.marked.includes(video.id) ? 'marked' : '';\n                                            return (\n                                                <div key={index} className={`row row-${index % 2} ${m}`}>\n                                                    {listIndex % 2\n                                                        ? <div>\n                                                            <button className=\"action-button\" onClick={\n                                                                () => this.move(listIndex, listIndex - 1,\n                                                                    video.id, /* ID within the playlist */\n                                                                    video.contentDetails.videoId /* ID within youtube */\n                                                                )}>\n                                                                <i className=\"fas fa-angle-left\"></i> move\n                                                            </button>\n                                                            <button className=\"action-button\" onClick={\n                                                                () => this.copy(listIndex, listIndex - 1,\n                                                                    video.id, /* ID within the playlist */\n                                                                    video.contentDetails.videoId /* ID within youtube */\n                                                                )}>\n                                                                <i className=\"fas fa-angle-double-left\"></i> copy\n                                                            </button>\n                                                        </div>\n                                                        : <div>\n                                                            <button className=\"action-button\" title=\"remove from this playlist\" onClick={\n                                                                () => this.remove(listIndex,\n                                                                    video.id, /* ID within the playlist */\n                                                                    video.contentDetails.videoId /* ID within youtube */\n                                                                )}>\n                                                                <i className=\"fas fa-trash-alt\"></i>\n                                                            </button>\n                                                        </div>\n                                                    }\n                                                    <div className=\"video-title\">\n                                                        <a href={`https://www.youtube.com/watch?v=${video.contentDetails.videoId}`} target=\"_blank\" rel=\"noopener noreferrer\">{video.snippet.title}</a>\n                                                    </div>\n                                                    {listIndex % 2\n                                                        ? <div>\n                                                            <button className=\"action-button\" title=\"remove from this playlist\" onClick={\n                                                                () => this.remove(listIndex,\n                                                                    video.id, /* ID within the playlist */\n                                                                    video.contentDetails.videoId /* ID within youtube */\n                                                                )}>\n                                                                <i className=\"fas fa-trash-alt\"></i>\n                                                            </button>\n                                                        </div>\n                                                        : <div>\n                                                            <button className=\"action-button\" onClick={\n                                                                () => this.copy(listIndex, listIndex + 1,\n                                                                    video.id, /* ID within the playlist */\n                                                                    video.contentDetails.videoId /* ID within youtube */\n                                                                )}>copy <i className=\"fas fa-angle-double-right\"></i>\n                                                            </button>\n                                                            <button className=\"action-button\" onClick={\n                                                                () => this.move(listIndex, listIndex + 1,\n                                                                    video.id, /* ID within the playlist */\n                                                                    video.contentDetails.videoId /* ID within youtube */\n                                                                )}>move <i className=\"fas fa-angle-right\"></i>\n                                                            </button>\n                                                        </div>\n                                                    }\n                                                </div>\n                                            )}\n                                        )\n                                    }\n                                    </div>\n                                </Fragment>}\n                            </div>\n                        )\n                    })\n                }\n                </div>\n            );\n        }\n    }\n\n}\n\nexport default TwinVideos;\n","import React, {Component, Fragment} from 'react';\nimport {\n    buildApiRequest, buildChannelPlaylistsRequest, buildPlaylistItemsRequest,\n    buildSubscriptionsRequest,\n    executeRequest,\n} from '../utils/gapi';\nimport { Link } from 'react-router-dom';\nimport './Subscriptions.css';\nimport {produce} from \"immer\";\nimport {snippetTitleSort} from \"../utils/sorting\";\n\n/**\n * Display the list of subscriptions of the authorized user.\n */\nclass Subscriptions extends Component {\n\n    constructor(props) {\n        super(props);\n        // console.log('Subscriptions.constructor', props);\n        this.state = {\n            isAuthorized: false,\n            subscriptions: null,\n            subscriptionsPlaylists: {},\n            // newSubscription: '',\n            filter: '',\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        // console.log('Subscriptions.getDerivedStateFromProps', props);\n        if (props.isAuthorized !== state.isAuthorized) {\n            return {\n                isAuthorized: props.isAuthorized,\n            };\n        }\n\n        // No state update necessary\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // console.log('Subscriptions.componentDidUpdate');\n        // At this point, we're in the \"commit\" phase, so it's safe to load the new data.\n        if (this.state.isAuthorized && this.state.subscriptions === null) {\n            // !!! only retrieve data if state.subscriptions is empty; otherwise this will generate an endless loop.\n            this.retrieve();\n        }\n    }\n\n    // newSubscriptionName = event => {\n    //     console.log('Subscriptions.newSubscriptionName');\n    //     this.setState({ newSubscription: event.target.value });\n    // };\n\n    // createSubscription = () => {\n    //     if (!this.state.newSubscription) return;\n    //     let request = buildApiRequest(\n    //         'POST',\n    //         '/youtube/v3/subscriptions',\n    //         {\n    //             part: 'snippet,status',\n    //             onBehalfOfContentOwner: '',\n    //         },\n    //         {\n    //             'snippet.title': this.state.newSubscription,\n    //             'snippet.description': '',\n    //             'snippet.tags[]': '',\n    //             'snippet.defaultLanguage': '',\n    //             'status.privacyStatus': 'private', // unlisted, private, public    https://developers.google.com/youtube/v3/docs/subscriptions#resource\n    //         }\n    //     );\n    //     //executeRequest(request, () => { this.insertSuccess(videoItemId) }, this.insertError);\n    //     executeRequest(\n    //         request,\n    //         resp => {\n    //             console.log('created subscription', resp);\n    //             this.retrieve();\n    //         },\n    //         this.createError\n    //     );\n    // };\n\n    store = (data, currentToken) => {\n\n        // console.log('Subscriptions.store', data);\n        if (!data) return;\n\n        let list = data.items;\n        list.sort(snippetTitleSort);\n\n        this.setState(\n            produce(draft => {\n                if (currentToken === undefined || !currentToken) {\n                    draft.subscriptions = list;\n                } else {\n                    draft.subscriptions = [...draft.subscriptions, ...list]\n                }\n            })\n        );\n\n        if (data.nextPageToken) {\n            // console.log('TwinVideos.storeVideos: get next page with token ' + data.nextPageToken);\n            this.retrieve(data.nextPageToken);\n        }\n\n        // let list = data.items;\n        // list.sort(function(a, b) {\n        //     return a.snippet.title.toLowerCase() > b.snippet.title.toLowerCase()\n        //         ? 1\n        //         : b.snippet.title.toLowerCase() > a.snippet.title.toLowerCase()\n        //         ? -1\n        //         : 0;\n        // });\n        // this.setState({ subscriptions: list });\n    };\n\n    retrieve = nextPageToken => {\n        // console.log('Subscriptions.retrieve', nextPageToken);\n        executeRequest(\n            buildSubscriptionsRequest(nextPageToken),\n            data => this.store(data, nextPageToken)\n        );\n    };\n\n    storeChannelPlaylist = (channelId, data) => {\n        // console.log(\"storeChannelPlaylist\", data);\n        const list = data.items;\n        list.sort(snippetTitleSort);\n        this.setState(\n            produce(draft => {\n                draft.subscriptionsPlaylists[channelId] = list;\n            })\n        );\n    };\n\n    retrieveChannelPlaylists = (channelId) => {\n        // console.log(`retrieveChannelPlaylists(${channelId})`);\n        executeRequest(\n            buildChannelPlaylistsRequest(channelId),\n            data => this.storeChannelPlaylist(channelId, data)\n        );\n    };\n\n    updateFilter = event => {\n        // console.log('Subscriptions.updateFilter');\n        if (event.keyCode === 27) {\n            this.setState({ filter: '' });\n        } else {\n            this.setState({ filter: event.target.value });\n        }\n    };\n\n    clearFilter = () => {\n        this.setState({filter: ''});\n    };\n\n    refresh = () => {\n        this.retrieve();\n    };\n\n    componentDidMount() {\n        // console.log('Subscriptions.componentDidMount');\n        this.retrieve();\n    }\n\n    /*\n{\n   \"kind\":\"youtube#subscription\",\n   \"etag\":\"\\\"DuHzAJ-eQIiCIp7p4ldoVcVAOeY/0v8-koTMYYwrjjH091gV-uVnD7w\\\"\",\n   \"id\":\"PL_x8MpUypxebPqAdp-FT7MeViRdJyVlwR\",\n   \"snippet\":{\n      \"publishedAt\":\"2015-10-04T21:36:35.000Z\",\n      \"channelId\":\"UCE0q36_agQAeb4G3PXivkew\",\n      \"title\":\"trailers\",\n      \"description\":\"\",\n      \"thumbnails\":{\n         \"default\":{\n            \"url\":\"https://i.ytimg.com/vi/z5gxjvYDPJQ/default.jpg\",\n            \"width\":120,\n            \"height\":90\n         },\n         \"medium\":{\n            \"url\":\"https://i.ytimg.com/vi/z5gxjvYDPJQ/mqdefault.jpg\",\n            \"width\":320,\n            \"height\":180\n         },\n         \"high\":{\n            \"url\":\"https://i.ytimg.com/vi/z5gxjvYDPJQ/hqdefault.jpg\",\n            \"width\":480,\n            \"height\":360\n         }\n      },\n      \"channelTitle\":\"François Georgy\",\n      \"localized\":{\n         \"title\":\"trailers\",\n         \"description\":\"\"\n      }\n   },\n   \"contentDetails\":{\n      \"itemCount\":3\n   }\n}\n    */\n\n    render() {\n        const { isAuthorized, subscriptions, subscriptionsPlaylists, filter } = this.state;\n\n        // console.log('Subscriptions render');\n\n        const filt = filter.toLowerCase();\n\n        if (!isAuthorized) {\n            return <div />;\n        } else {\n            if (subscriptions) {\n                return (\n                    <div>\n                        <h2>list of subscriptions</h2>\n                        <h3>{subscriptions.length} subscriptions</h3>\n                        <button onClick={this.refresh}>refresh</button>\n                        <div className=\"filter\">\n                            filter:{' '}\n                            <input type=\"text\" onKeyUp={this.updateFilter} />\n                            <button onClick={this.clearFilter}>clear filter</button>\n                        </div>\n                        <div className=\"subscriptions-list\">\n                            {subscriptions\n                                .filter(p => (p.snippet.title.toLowerCase().indexOf(filt) > -1) || (p.snippet.description.toLowerCase().indexOf(filt) > -1))\n                                .map((subscription, index) => {\n                                    // console.log(subscription);\n                                    const chanId = subscription.snippet.resourceId.channelId;\n                                    return (\n                                        <Fragment key={index}>\n                                            <div>\n                                                <Link to={`/videos/${subscription.id}`}>\n                                                    {subscription.snippet.title}\n                                                </Link>\n                                                <a href={`https://www.youtube.com/channel/${chanId}`} target=\"_blank\" rel=\"noopener noreferrer\">open</a>\n                                            </div>\n                                            <div>\n                                                {subscription.snippet.description}\n                                                {' '}<button onClick={() => this.retrieveChannelPlaylists(chanId)}>show playlists</button>\n                                                {subscriptionsPlaylists[chanId] &&\n                                                <div className=\"channel-playlists\">\n                                                    {subscriptionsPlaylists[chanId].map(\n                                                        (item, index) => {\n                                                            return (\n                                                                <a key={index} href={`https://www.youtube.com/playlist?list=${item.id}`} target=\"_blank\" rel=\"noopener noreferrer\">{item.snippet.title} ({item.contentDetails.itemCount})</a>\n                                                            );\n                                                        }\n                                                    )}\n                                                </div>\n                                                }\n                                            </div>\n                                        </Fragment>\n                                    );\n                                    // return <div key={index}><a href={`#${subscription.id}`}>{subscription.snippet.title}</a> ({subscription.contentDetails.itemCount} videos)</div>\n                                })}\n                        </div>\n                    </div>\n                );\n            } else {\n                return <div>Retrieving the subscriptions...</div>;\n            }\n        }\n    }\n}\n\nexport default Subscriptions;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Playlists from './components/Playlists';\nimport Videos from './components/Videos';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport Channels from './components/Channels';\nimport TwinVideos from \"./components/TwinVideos\";\nimport Subscriptions from \"./components/Subscriptions\";\n// import { library } from '@fortawesome/fontawesome-svg-core'\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n//\n// library.add(faAngleDoubleRight);\n\n\n/*\n    gapi.load\n    gapi.client.init\n    gapi.auth2.getAuthInstance\n    <authorize button>\n    instance.signIn\n    user.getBasicProfile\n*/\n\nclass App extends Component {\n    //TODO: toggle authorized button once authorized\n\n    state = {\n        google_api: null,\n        user: null,\n        isAuthorized: false,\n    };\n\n    /**\n     * Called on update of sign-in status\n     */\n    setSigninStatus = () => {\n        console.log('setSigninStatus', this.state.google_api);\n        if (this.state.google_api) {\n            // console.log(\"* instance.currentUser.get()\");\n            let user = this.state.google_api.currentUser.get();\n\n            // console.log(\"setSigninStatus: user\", user);\n\n            let isAuthorized = user.hasGrantedScopes(\n                'https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtubepartner'\n            );\n            this.setState({\n                user: user,\n                isAuthorized: isAuthorized,\n            });\n        }\n    };\n\n    updateSigninStatus = () => {\n        // console.log(\"updateSigninStatus\");\n        this.setSigninStatus();\n    };\n\n    initClient = () => {\n        console.log('initClient');\n\n        // console.log(\"* gapi.client.init\");\n        window.gapi.client\n            .init({\n                clientId:\n                    '1035406715321-fu4ktringpl82201dm2g9fm674akd203.apps.googleusercontent.com',\n                discoveryDocs: [\n                    'https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest',\n                ],\n                scope:\n                    'https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtubepartner', //,\n                // 'access_type': 'offline'\n            })\n            .then(() => {\n                console.log('initClient: success');\n\n                // console.log(\"* gapi.auth2.getAuthInstance\");\n                let inst = window.gapi.auth2.getAuthInstance(); // https://developers.google.com/api-client-library/javascript/reference/referencedocs#gapiauth2getauthinstance\n                // console.log(\"initClient: google_api\", inst);\n\n                // Listen for sign-in state changes\n                inst.isSignedIn.listen(this.updateSigninStatus);\n\n                // Handle initial sign-in state. (Determine if user is already signed in.)\n                this.setSigninStatus();\n                this.setState({ google_api: inst });\n            })\n            .catch(function(e) {\n                console.warn('initClient: auth error: ', e);\n            });\n    };\n\n    authorize = () => {\n\n        console.log('authorize');\n\n        let auth = window.gapi.auth2.getAuthInstance();\n        auth.grantOfflineAccess().then(function(resp) {\n            // console.log(\"authorize grantOfflineAccess\",resp);\n            var auth_code = resp.code;\n        });\n\n        // console.log(\"* instance.signIn\");\n        this.state.google_api.signIn().then(user => {\n            // console.log(\"signIn return, user\", user);\n\n            /*\n\n                // https://stackoverflow.com/questions/32848870/googleuser-object-does-not-have-grantofflineaccess-method\n                user.grantOfflineAccess({\n                    authuser: user.getAuthResponse().session_state.extraQueryParams.authuser\n                }).then(function(resp) {\n                    console.log(\"grantOfflineAccess\",resp);\n                    var auth_code = resp.code;\n\n                    // !!! Allow popup\n\n                    // {code: \"4/AABatlLl3D2rnSW7vIMcgAaua0uvaZ4oEvy5c2Q_3_NJpEDOk25y6zN8Pr7eBB8rsZ6wv0PQP_Rz_7ZABEccn4k\"}\n                });\n*/\n\n            // console.log(\"* user.getBasicProfile\");\n            let p = user.getBasicProfile();\n            // console.log(\"signIn return, user profile\", p);\n            let isAuthorized = user.hasGrantedScopes(\n                'https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtubepartner'\n            );\n            // console.log(\"signIn return, isAuthorized=\" + isAuthorized);\n            this.setState({\n                user: user,\n                userProfile: p,\n                isAuthorized: isAuthorized,\n            });\n        });\n    };\n\n    grantAccess = () => {\n        // console.log(\"grantAccess\");\n\n        let auth = window.gapi.auth2.getAuthInstance();\n        // let user = auth.currentUser.get();\n\n        // console.log(\"grantAccess\", user);\n        //\n        // https://stackoverflow.com/questions/32848870/googleuser-object-does-not-have-grantofflineaccess-method\n        auth.grantOfflineAccess({\n            // authuser: user.getAuthResponse().session_state.extraQueryParams.authuser\n            prompt: 'consent',\n        }).then(function(resp) {\n            console.log('grantOfflineAccess', resp);\n            var auth_code = resp.code;\n\n            // !!! Allow popup\n\n            // {code: \"4/AABatlLl3D2rnSW7vIMcgAaua0uvaZ4oEvy5c2Q_3_NJpEDOk25y6zN8Pr7eBB8rsZ6wv0PQP_Rz_7ZABEccn4k\"}\n        });\n    };\n\n    componentDidMount() {\n        // console.log(\"gapi\", window.gapi);\n        // https://developers.google.com/api-client-library/javascript/reference/referencedocs\n\n        // Here we use gapi.load('client:auth2', ...) to load both the client module (for dealing with API requests)\n        // and the auth2 module (for dealing with OAuth 2.0) upfront. The gapi.client.init fuction lazily loads auth2\n        // if it is needed. If you are sure your app needs auth, loading the two modules 'client:auth2' together\n        // before you call gapi.client.init will save one script load request.\n\n        // console.log(\"* gapi.load\");\n        window.gapi.load('client:auth2', this.initClient);\n    }\n\n    render() {\n        // console.log(\"render\", this.state);\n\n        const { isAuthorized, userProfile } = this.state;\n\n        return (\n            <Router>\n                <div>\n                    <div className=\"header\">\n                        Youtube Playlist Editor\n                        <button onClick={this.grantAccess}>Grant access</button>\n                        {isAuthorized ? (\n                            <div className=\"header-info\">\n                                Authorized for {userProfile.getName()}\n                            </div>\n                        ) : (\n                            <span>\n                                <button onClick={this.authorize}>\n                                    Authorize\n                                </button>\n                            </span>\n                        )}\n                        {isAuthorized && (\n                            <Link className=\"header-link\" to=\"/channels\">\n                                Channels\n                            </Link>\n                        )}\n                        {isAuthorized && (\n                            <Link className=\"header-link\" to=\"/playlists\">\n                                Playlists\n                            </Link>\n                        )}\n                        {isAuthorized && (\n                            <Link className=\"header-link\" to=\"/subscriptions\">\n                                Subscriptions\n                            </Link>\n                        )}\n                        {isAuthorized && (\n                            <Link className=\"header-link\" to=\"/videos2\">\n                                Videos\n                            </Link>\n                        )}\n                    </div>\n                    <div className=\"content\">\n                        {!isAuthorized && (\n                            <div>\n                                <p>\n                                    You need to authorize the application to\n                                    access your Youtube playlists.\n                                </p>\n                                <p>\n                                    Click the{' '}\n                                    <button onClick={this.authorize}>\n                                        Authorize\n                                    </button>{' '}\n                                    button to allow the access.\n                                </p>\n                            </div>\n                        )}\n                        <Switch>\n                            {/*<Route exact={true} path=\"/\" component={Home}/>*/}\n                            {/*<Route path=\"/playlists\" component={Playlists} />*/}\n                            <Route\n                                path=\"/channels\"\n                                render={props => (\n                                    <Channels\n                                        {...props}\n                                        isAuthorized={isAuthorized}\n                                    />\n                                )}\n                            />\n                            <Route\n                                path=\"/subscriptions\"\n                                render={props => (\n                                    <Subscriptions\n                                        {...props}\n                                        isAuthorized={isAuthorized}\n                                    />\n                                )}\n                            />\n                            <Route\n                                path=\"/playlists\"\n                                render={props => (\n                                    <Playlists\n                                        {...props}\n                                        isAuthorized={isAuthorized}\n                                    />\n                                )}\n                            />\n                            <Route\n                                path=\"/videos/:playlistid\"\n                                render={props => (\n                                    <Videos\n                                        {...props}\n                                        isAuthorized={isAuthorized}\n                                    />\n                                )}\n                            />\n                            <Route\n                                path=\"/videos2\"\n                                render={props => (\n                                    <TwinVideos\n                                        {...props}\n                                        isAuthorized={isAuthorized}\n                                    />\n                                )}\n                            />\n                        </Switch>\n                    </div>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log(\n                                'New content is available; please refresh.'\n                            );\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') ===\n                    -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nfunction noop() {}\nif (process.env.NODE_ENV !== 'development') {\n    console.log = noop;\n    console.warn = noop;\n    console.error = noop;\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}